{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/player/Testcafe.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "cboulanger",
    "eventrecorder",
    "player",
    "Qooxdoo",
    "implement",
    "IPlayer",
    "properties",
    "canExportExecutableCode",
    "refine",
    "init",
    "members",
    "_applyMode",
    "value",
    "old",
    "warn",
    "setMode",
    "getExportFileExtension",
    "translate",
    "script",
    "lines",
    "_translate",
    "split",
    "window",
    "location",
    "href",
    "map",
    "line",
    "join",
    "_generateUtilityFunctionsCode",
    "_translateLine",
    "code",
    "startsWith",
    "endsWith",
    "cmd_delay",
    "delayInMs",
    "Math",
    "min",
    "getMaxDelay",
    "getMode",
    "cmd_wait",
    "timeInMs",
    "Testcafe"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;AAoBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,0CAAhB,EAA4D;AAE1DC,IAAAA,MAAM,EAAGC,UAAU,CAACC,aAAX,CAAyBC,MAAzB,CAAgCC,OAFiB;AAI1DC,IAAAA,SAAS,EAAE,CAACJ,UAAU,CAACC,aAAX,CAAyBI,OAA1B,CAJ+C;AAM1DC,IAAAA,UAAU,EAAE;AACV;;;AAGAC,MAAAA,uBAAuB,EAAE;AACvBC,QAAAA,MAAM,EAAE,IADe;AAEvBC,QAAAA,IAAI,EAAE;AAFiB;AAJf,KAN8C;AAgB1DC,IAAAA,OAAO,EACP;AAEE;;;;;;AAMAC,MAAAA,UARF,sBAQaC,KARb,EAQmBC,GARnB,EAQwB;AACpB,YAAID,KAAK,KAAK,cAAd,EAA8B;AAC5B,eAAKE,IAAL,CAAU,4DAAV;AACA,eAAKC,OAAL,CAAa,MAAb;AACD;AACF,OAbH;;AAeE;;;;AAIAC,MAAAA,sBAnBF,oCAmB2B;AACvB,eAAO,IAAP;AACD,OArBH;;AAuBE;;;;;AAKAC,MAAAA,SA5BF,qBA4BYC,MA5BZ,EA4BoB;AAChB,YAAIC,KAAK,GAAG,KAAKC,UAAL,CAAgBF,MAAhB,EAAwBG,KAAxB,CAA8B,IAA9B,CAAZ;;AACA,eAAO,CACL,4BADK,EAEL,cAAcC,MAAM,CAACC,QAAP,CAAgBC,IAA9B,GAAqC,IAFhC,EAGL,EAHK,EAIL,uCAJK,4BAKFL,KAAK,CAACM,GAAN,CAAU,UAAAC,IAAI;AAAA,iBAAI,OAAOA,IAAX;AAAA,SAAd,CALE,IAML,KANK,GAOLC,IAPK,CAOA,IAPA,CAAP;AAQD,OAtCH;;AAwCE;;;AAGAC,MAAAA,6BA3CF,yCA2CgCV,MA3ChC,EA2CwC;AACpC,eAAO,iGAAqBA,MAArB,EAA6BO,GAA7B,CAAiC,UAAAC,IAAI;AAAA,+CAA2BA,IAA3B;AAAA,SAArC,CAAP;AACD,OA7CH;;AA+CE;;;;;;AAMAG,MAAAA,cArDF,0BAqDiBH,IArDjB,EAqDuB;AACnB,YAAII,IAAI,qFAAwBJ,IAAxB,CAAR;;AACA,YAAII,IAAI,IAAI,CAACA,IAAI,CAACC,UAAL,CAAgB,UAAhB,CAAT,IAAwC,CAACD,IAAI,CAACC,UAAL,CAAgB,IAAhB,CAA7C,EAAoE;AAClED,UAAAA,IAAI,GAAIA,IAAI,CAACE,QAAL,CAAc,GAAd,KAAsBF,IAAI,CAACE,QAAL,CAAc,GAAd,CAAvB,+BACgBF,IADhB,sCAEeA,IAFf,OAAP;AAGD;;AACD,eAAOA,IAAP;AACD,OA7DH;;AA+DE;;;;;;AAQA;;;;;;;AAOAG,MAAAA,SA9EF,qBA8EYC,SA9EZ,EA8EuB;AACnBA,QAAAA,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASF,SAAT,EAAoB,KAAKG,WAAL,EAApB,CAAZ;AACA,eAAO,KAAKC,OAAL,OAAmB,cAAnB,IAAqCJ,SAAS,GAAG,CAAjD,0BAAqEA,SAArE,UAAoF,EAA3F;AACD,OAjFH;;AAmFE;;;;;AAKAK,MAAAA,QAxFF,oBAwFWC,QAxFX,EAwFqB;AACjB,sCAAuBA,QAAvB;AACD;AA1FH;AAjB0D,GAA5D,C;AApBAxC,EAAAA,UAAU,CAACC,aAAX,CAAyBC,MAAzB,CAAgCuC,QAAhC,CAAyC7C,aAAzC,GAAyDA,aAAzD",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n\n************************************************************************ */\n\n/**\n * A player that replays in the browser using qooxdoo code, and which can\n * export TestCafé code\n */\nqx.Class.define(\"cboulanger.eventrecorder.player.Testcafe\", {\n\n  extend : cboulanger.eventrecorder.player.Qooxdoo,\n\n  implement: [cboulanger.eventrecorder.IPlayer],\n\n  properties: {\n    /**\n     * @inheritDoc\n     */\n    canExportExecutableCode: {\n      refine: true,\n      init: true\n    }\n  },\n\n  members :\n  {\n\n    /**\n     * overridden to disallow presentation mode\n     * @param value\n     * @param old\n     * @private\n     */\n    _applyMode(value,old) {\n      if (value === \"presentation\") {\n        this.warn(\"Presentation mode is not supported, switching to test mode\");\n        this.setMode(\"test\");\n      }\n    },\n\n    /**\n     * Returns the file extension of the downloaded file in the target language\n     * @return {string}\n     */\n    getExportFileExtension() {\n      return \"js\";\n    },\n\n    /**\n     * Translates the intermediate code into the target language\n     * @param script\n     * @return {string} executable code\n     */\n    translate(script) {\n      let lines = this._translate(script).split(/\\n/);\n      return [\n        \"fixture `Test suite title`\",\n        \"  .page `\" + window.location.href + \"`;\",\n        \"\",\n        \"test('Test description', async t => {\",\n        ...lines.map(line => \"  \" + line),\n        \"});\"\n      ].join(\"\\n\");\n    },\n\n    /**\n     * @inheritDoc\n     */\n    _generateUtilityFunctionsCode(script) {\n      return this.base(arguments, script).map(line => `await t.eval(() => {${line}});`);\n    },\n\n    /**\n     * Translates a line of intermediate script code to testcafé code\n     * @param line\n     * @return {*|var}\n     * @private\n     */\n    _translateLine(line) {\n      let code = this.base(arguments, line);\n      if (code && !code.startsWith(\"await t.\") && !code.startsWith(\"//\")) {\n        code = (code.endsWith(\";\") || code.endsWith(\"}\")) ?\n          `await t.eval(()=>{${code}});`:\n          `await t.eval(()=>${code});`;\n      }\n      return code;\n    },\n\n    /*\n    ============================================================================\n       COMMANDS\n    ============================================================================\n    */\n\n\n\n    /**\n     * Generates code that causes the given delay (in milliseconds).\n     * The delay is capped by the {@link #cboulanger.eventrecorder.player.Abstract#maxDelay} property\n     * and will only be caused in presentation mode\n     * @param delayInMs {Number}\n     * @return {string}\n     */\n    cmd_delay(delayInMs) {\n      delayInMs = Math.min(delayInMs, this.getMaxDelay());\n      return this.getMode() === \"presentation\" && delayInMs > 0 ? `await t.wait(${delayInMs});`: \"\";\n    },\n\n    /**\n     * Generates code that waits the given time in milliseconds, regardless of player mode\n     * @param timeInMs {Number}\n     * @return {string}\n     */\n    cmd_wait(timeInMs) {\n      return `await t.wait(${timeInMs});`;\n    }\n  }\n});\n"
  ]
}