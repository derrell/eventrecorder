{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/eventrecorder/source/class/cboulanger/eventrecorder/UiController.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "window",
    "Window",
    "statics",
    "CONFIG_KEY",
    "SCRIPT",
    "PLAYER_TYPE",
    "PLAYER_MODE",
    "GIST_ID",
    "AUTOPLAY",
    "SHOW_PROGRESS",
    "SCRIPTABLE",
    "RELOAD_BEFORE_REPLAY",
    "SCRIPT_URL",
    "FILE_INPUT_ID",
    "aliases",
    "properties",
    "mode",
    "check",
    "event",
    "init",
    "apply",
    "recorder",
    "nullable",
    "player",
    "script",
    "deferredInit",
    "autoplay",
    "reloadBeforeReplay",
    "gistId",
    "scriptable",
    "construct",
    "caption",
    "_getPersistenceProviders",
    "env",
    "storage",
    "uri_params",
    "aliasMgr",
    "util",
    "AliasManager",
    "getInstance",
    "getAliases",
    "Object",
    "entries",
    "cboulanger",
    "eventrecorder",
    "UiController",
    "alias",
    "base",
    "add",
    "set",
    "modal",
    "showMinimize",
    "showMaximize",
    "height",
    "layout",
    "HBox",
    "allowGrowX",
    "allowGrowY",
    "_iniPropertiesFromEnvironment",
    "__players",
    "Recorder",
    "setRecorder",
    "objectId",
    "replace",
    "toLocaleLowerCase",
    "setQxObjectId",
    "core",
    "Id",
    "register",
    "getScriptable",
    "excludeIds",
    "bind",
    "converter",
    "v",
    "_createControl",
    "stopButton",
    "stopButtonState",
    "setEnabled",
    "isRunning",
    "Boolean",
    "getPlayer",
    "addListener",
    "e",
    "getData",
    "form",
    "document",
    "createElement",
    "setAttribute",
    "body",
    "appendChild",
    "input",
    "playerType",
    "queryKey",
    "eventrecorder_type",
    "get",
    "eventrecorder_player_mode",
    "getItem",
    "getPlayerByType",
    "setMode",
    "setItem",
    "setPlayer",
    "getGistId",
    "getAutoplay",
    "getScript",
    "_scriptUrlMatches",
    "_getRawGist",
    "then",
    "gist",
    "gistplayer",
    "Qooxdoo",
    "setAutoplay",
    "replay",
    "setScript",
    "Error",
    "message",
    "members",
    "__editorWindow",
    "id",
    "control",
    "getRecorder",
    "loadMenu",
    "menu",
    "Menu",
    "loadUserGistButton",
    "Button",
    "loadUserGist",
    "loadGistByIdButton",
    "loadGistById",
    "SplitButton",
    "enabled",
    "icon",
    "toolTipText",
    "addOwnedQxObject",
    "load",
    "SplitToggleButton",
    "replayMenu",
    "macroButton",
    "macroMenu",
    "setMenu",
    "updateMenu",
    "removeAll",
    "name",
    "description",
    "getMacroDescription",
    "label",
    "trim",
    "menuButton",
    "macro",
    "getMacroDefinition",
    "join",
    "InfoPane",
    "hide",
    "getMacroNames",
    "toArray",
    "getMacros",
    "getNames",
    "addSeparator",
    "optionReload",
    "CheckBox",
    "_startReplay",
    "getCanReplayInBrowser",
    "recordMenu",
    "debugEvents",
    "setIcon",
    "_toggleRecord",
    "stop",
    "edit",
    "save",
    "Environment",
    "bom",
    "Web",
    "getSession",
    "Uri",
    "parseUri",
    "location",
    "href",
    "initScript",
    "eventrecorder_autoplay",
    "initAutoplay",
    "initReloadBeforeReplay",
    "eventrecorder_gist_id",
    "initGistId",
    "eventrecorder_scriptable",
    "initScriptable",
    "_applyMode",
    "value",
    "old",
    "_applyScript",
    "_saveScriptUrl",
    "_applyGistId",
    "_applyAutoplay",
    "_applyReloadBeforeReplay",
    "record",
    "getReloadBeforeReplay",
    "reload",
    "getQxObject",
    "setValue",
    "_upload",
    "Promise",
    "resolve",
    "reject",
    "getElementById",
    "addEventListener",
    "file",
    "target",
    "files",
    "endsWith",
    "reader",
    "FileReader",
    "result",
    "readAsText",
    "click",
    "_download",
    "filename",
    "text",
    "element",
    "encodeURIComponent",
    "style",
    "display",
    "removeChild",
    "gist_id",
    "url",
    "req",
    "io",
    "request",
    "Jsonp",
    "response",
    "getResponse",
    "lang",
    "Type",
    "isObject",
    "data",
    "JSON",
    "stringify",
    "filenames",
    "getOwnPropertyNames",
    "content",
    "send",
    "_getApplicationName",
    "pathname",
    "split",
    "slice",
    "__setupEditor",
    "win",
    "qookery",
    "contexts",
    "Qookery",
    "loadResource",
    "ResourceManager",
    "toUri",
    "xmlSource",
    "xmlDocument",
    "xml",
    "Document",
    "fromString",
    "parser",
    "createFormParser",
    "formComponent",
    "parseXmlDocument",
    "editorWidget",
    "getMainWidget",
    "getModel",
    "setLeftEditorContent",
    "formModel",
    "translateTo",
    "getTargetScriptType",
    "getTargetMode",
    "Timer",
    "once",
    "__setupAutocomplete",
    "dispose",
    "langTools",
    "ace",
    "require",
    "tokens",
    "iface",
    "Interface",
    "getByName",
    "$$members",
    "key",
    "startsWith",
    "code",
    "toString",
    "params",
    "indexOf",
    "map",
    "p",
    "substr",
    "snippet",
    "i",
    "meta",
    "push",
    "type",
    "ids",
    "traverseObjectTree",
    "obj",
    "getQxObjectId",
    "getAbsoluteIdOf",
    "getOwnedQxObjects",
    "owned",
    "registeredObjects",
    "values",
    "__registeredObjects",
    "completer",
    "getCompletions",
    "editor",
    "session",
    "pos",
    "prefix",
    "callback",
    "length",
    "line",
    "getLine",
    "row",
    "column",
    "numberOfTokens",
    "_tokenize",
    "options",
    "filter",
    "token",
    "score",
    "addCompleter",
    "clazz",
    "String",
    "firstUp",
    "dialog",
    "Dialog",
    "select",
    "promise",
    "start",
    "infoPane",
    "useIcon",
    "step",
    "steps",
    "error",
    "open",
    "VBox",
    "width",
    "center",
    "exporter",
    "model",
    "editedScript",
    "getLeftEditorContent",
    "translatedText",
    "translate",
    "setRightEditorContent",
    "exportTo",
    "translatedScript",
    "getRightEditorContent",
    "getExportFileExtension",
    "formData",
    "username",
    "show_all",
    "answer",
    "gist_data",
    "suffix",
    "entry",
    "some",
    "prompt",
    "setGistId",
    "defer",
    "setOption",
    "OPTION_EXTERNAL_LIBRARIES",
    "Lifecycle",
    "onReady",
    "dispayedText",
    "getDisplayedText",
    "isDefined",
    "objIdGen",
    "addListenerOnce",
    "controller",
    "Init",
    "getApplication",
    "getRoot",
    "top",
    "right",
    "show"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;AAsBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,uCAAhB,EAAyD;AACvDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,MAAN,CAAaC,MADkC;AAEvDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAG;AACXC,QAAAA,MAAM,EAAQ,sBADH;AAEXC,QAAAA,WAAW,EAAG,2BAFH;AAGXC,QAAAA,WAAW,EAAG,2BAHH;AAIXC,QAAAA,OAAO,EAAO,uBAJH;AAKXC,QAAAA,QAAQ,EAAM,wBALH;AAMXC,QAAAA,aAAa,EAAC,6BANH;AAOXC,QAAAA,UAAU,EAAI,0BAPH;AAQXC,QAAAA,oBAAoB,EAAE,oCARX;AASXC,QAAAA,UAAU,EAAI;AATH,OADN;AAYPC,MAAAA,aAAa,EAAG,0BAZT;AAaPC,MAAAA,OAAO,EAAE;AACP,qCAA8B,2CADvB;AAEP,oCAA8B,mDAFvB;AAGP,oCAA8B,mDAHvB;AAIP,mCAA8B,kDAJvB;AAKP,mCAA8B,kDALvB;AAMP,mCAA8B,4CANvB;AAOP,mCAA8B,4CAPvB;AAQP,qCAA8B;AARvB;AAbF,KAF8C;AA2BvDC,IAAAA,UAAU,EAAE;AACV;;;AAGAC,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,UAAX,CADH;AAEJC,QAAAA,KAAK,EAAE,YAFH;AAGJC,QAAAA,IAAI,EAAE,UAHF;AAIJC,QAAAA,KAAK,EAAE;AAJH,OAJI;;AAWV;;;AAGAC,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,KAAK,EAAE,mCADC;AAERC,QAAAA,KAAK,EAAE,gBAFC;AAGRI,QAAAA,QAAQ,EAAE;AAHF,OAdA;;AAoBV;;;AAGAC,MAAAA,MAAM,EAAE;AACNN,QAAAA,KAAK,EAAE,kCADD;AAENC,QAAAA,KAAK,EAAE,cAFD;AAGNI,QAAAA,QAAQ,EAAE;AAHJ,OAvBE;;AA6BV;;;AAGAE,MAAAA,MAAM,EAAE;AACNP,QAAAA,KAAK,EAAE,QADD;AAENK,QAAAA,QAAQ,EAAE,IAFJ;AAGNG,QAAAA,YAAY,EAAE,IAHR;AAINP,QAAAA,KAAK,EAAE,cAJD;AAKNE,QAAAA,KAAK,EAAE;AALD,OAhCE;;AAwCV;;;;AAIAM,MAAAA,QAAQ,EAAE;AACRT,QAAAA,KAAK,EAAE,SADC;AAERK,QAAAA,QAAQ,EAAE,KAFF;AAGRG,QAAAA,YAAY,EAAE,IAHN;AAIRP,QAAAA,KAAK,EAAE,gBAJC;AAKRE,QAAAA,KAAK,EAAE;AALC,OA5CA;;AAoDV;;;AAGAO,MAAAA,kBAAkB,EAAE;AAClBV,QAAAA,KAAK,EAAE,SADW;AAElBK,QAAAA,QAAQ,EAAE,KAFQ;AAGlBG,QAAAA,YAAY,EAAE,IAHI;AAIlBP,QAAAA,KAAK,EAAE,0BAJW;AAKlBE,QAAAA,KAAK,EAAE;AALW,OAvDV;;AA+DV;;;AAGAQ,MAAAA,MAAM,EAAE;AACNX,QAAAA,KAAK,EAAE,QADD;AAENK,QAAAA,QAAQ,EAAE,IAFJ;AAGNG,QAAAA,YAAY,EAAE,IAHR;AAINP,QAAAA,KAAK,EAAE,cAJD;AAKNE,QAAAA,KAAK,EAAE;AALD,OAlEE;;AA0EV;;;;AAIAS,MAAAA,UAAU,EAAE;AACVZ,QAAAA,KAAK,EAAE,SADG;AAEVK,QAAAA,QAAQ,EAAE,KAFA;AAGVG,QAAAA,YAAY,EAAE,IAHJ;AAIVP,QAAAA,KAAK,EAAE;AAJG;AA9EF,KA3B2C;;AAiHvD;;;;;;;;;AASAY,IAAAA,SAAS,EAAE,qBAAmC;AAAA;;AAAA,UAA1BC,OAA0B,uEAAlB,gBAAkB;AAC5C;;AAD4C,kCAGX,KAAKC,wBAAL,EAHW;AAAA,UAGvCC,GAHuC,yBAGvCA,GAHuC;AAAA,UAGlCC,OAHkC,yBAGlCA,OAHkC;AAAA,UAGzBC,UAHyB,yBAGzBA,UAHyB,EAK5C;;;AACA,UAAMC,QAAQ,GAAG5C,EAAE,CAAC6C,IAAH,CAAQC,YAAR,CAAqBC,WAArB,EAAjB;AACA,UAAMzB,OAAO,GAAGsB,QAAQ,CAACI,UAAT,EAAhB;;AACA,yCAA0BC,MAAM,CAACC,OAAP,CAAeC,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC/B,OAArD,CAA1B,qCAAyF;AAAA;AAAA,YAA/EgC,KAA+E;AAAA,YAAxEC,IAAwE;;AACvF,YAAI,CAACjC,OAAO,CAACgC,KAAD,CAAZ,EAAqB;AACnBV,UAAAA,QAAQ,CAACY,GAAT,CAAaF,KAAb,EAAoBC,IAApB;AACD;AACF,OAZ2C,CAa5C;;;AACA,WAAKE,GAAL,CAAS;AACPlB,QAAAA,OAAO,EAAPA,OADO;AAEPmB,QAAAA,KAAK,EAAE,KAFA;AAGPC,QAAAA,YAAY,EAAE,KAHP;AAIPC,QAAAA,YAAY,EAAE,KAJP;AAKPC,QAAAA,MAAM,EAAE,EALD;AAMPC,QAAAA,MAAM,EAAE,IAAI9D,EAAE,CAACO,EAAH,CAAMuD,MAAN,CAAaC,IAAjB,CAAsB,CAAtB,CAND;AAOPC,QAAAA,UAAU,EAAE,KAPL;AAQPC,QAAAA,UAAU,EAAE;AARL,OAAT;;AAWA,WAAKC,6BAAL;;AACA,WAAKC,SAAL,GAAiB,EAAjB;AAEA,UAAMtC,QAAQ,GAAG,IAAIsB,UAAU,CAACC,aAAX,CAAyBgB,QAA7B,EAAjB;AACA,WAAKC,WAAL,CAAiBxC,QAAjB,EA7B4C,CA+B5C;;AACA,UAAMyC,QAAQ,GAAG/B,OAAO,CAACgC,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,EAA0BC,iBAA1B,EAAjB;AACA,WAAKC,aAAL,CAAmBH,QAAnB;AACAtE,MAAAA,EAAE,CAAC0E,IAAH,CAAQC,EAAR,CAAW5B,WAAX,GAAyB6B,QAAzB,CAAkC,IAAlC,EAAwCN,QAAxC,EAlC4C,CAoC5C;;AACA,UAAI,CAAC,KAAKO,aAAL,EAAL,EAA2B;AACzBhD,QAAAA,QAAQ,CAACiD,UAAT,CAAoBR,QAApB;AACD,OAvC2C,CAyC5C;;;AACA,WAAKS,IAAL,CAAU,kBAAV,EAA8B,IAA9B,EAAoC,SAApC,EAA+C;AAC7CC,QAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,iBAAIA,CAAC,GAAG,eAAH,GAAqB1C,OAA1B;AAAA;AADiC,OAA/C;AAGA,WAAKwC,IAAL,CAAU,gBAAV,EAA4B,IAA5B,EAAkC,SAAlC,EAA6C;AAC3CC,QAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,iBAAIA,CAAC,GAAG,eAAH,GAAqB1C,OAA1B;AAAA;AAD+B,OAA7C,EA7C4C,CAgD5C;;AACA,WAAK2C,cAAL,CAAoB,MAApB;;AACA,WAAKA,cAAL,CAAoB,QAApB;;AACA,WAAKA,cAAL,CAAoB,QAApB;;AACA,UAAIC,UAAU,GAAG,KAAKD,cAAL,CAAoB,MAApB,CAAjB;;AACA,WAAKA,cAAL,CAAoB,MAApB;;AACA,WAAKA,cAAL,CAAoB,MAApB,EAtD4C,CAuD5C;;;AAEA,UAAME,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BD,QAAAA,UAAU,CAACE,UAAX,CACExD,QAAQ,CAACyD,SAAT,MAAyBC,OAAO,CAAC,KAAI,CAACC,SAAL,EAAD,CAAP,IAA6B,KAAI,CAACA,SAAL,GAAiBF,SAAjB,EADxD;AAGD,OAJD;;AAKAzD,MAAAA,QAAQ,CAAC4D,WAAT,CAAqB,eAArB,EAAsCL,eAAtC;AACA,WAAKK,WAAL,CAAiB,cAAjB,EAAiC,UAAAC,CAAC,EAAI;AACpC,YAAIA,CAAC,CAACC,OAAF,EAAJ,EAAiB;AACf,UAAA,KAAI,CAACH,SAAL,GAAiBC,WAAjB,CAA6B,eAA7B,EAA8CL,eAA9C;AACD;AACF,OAJD,EA/D4C,CAoE5C;;AACA,UAAIQ,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAX;AACAF,MAAAA,IAAI,CAACG,YAAL,CAAkB,YAAlB,EAAgC,QAAhC;AACAF,MAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0BL,IAA1B;AACA,UAAIM,KAAK,GAAGL,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAZ;AACAI,MAAAA,KAAK,CAACH,YAAN,CAAmB,IAAnB,EAAyB5C,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsChC,aAA/D;AACA6E,MAAAA,KAAK,CAACH,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;AACAG,MAAAA,KAAK,CAACH,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;AACAG,MAAAA,KAAK,CAACH,YAAN,CAAmB,YAAnB,EAAiC,QAAjC;AACAH,MAAAA,IAAI,CAACK,WAAL,CAAiBC,KAAjB,EA7E4C,CA+E5C;;AACA,UAAIC,UAAU,GAAGxD,UAAU,CAACyD,QAAX,CAAoBC,kBAApB,IACf5D,GAAG,CAAC6D,GAAJ,CAAQnD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDE,WAAzD,CADe,IAEf,SAFF;AAGA,UAAIW,IAAI,GAAGmB,UAAU,CAACyD,QAAX,CAAoBG,yBAApB,IACT7D,OAAO,CAAC8D,OAAR,CAAgBrD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDG,WAAjE,CADS,IAET2B,GAAG,CAAC6D,GAAJ,CAAQnD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDG,WAAzD,CAFS,IAGT,cAHF;AAIA,UAAIiB,MAAM,GAAG,KAAK0E,eAAL,CAAqBN,UAArB,CAAb;AACApE,MAAAA,MAAM,CAAC2E,OAAP,CAAelF,IAAf;AACAO,MAAAA,MAAM,CAAC0D,WAAP,CAAmB,YAAnB,EAAiC,UAAAC,CAAC,EAAI;AACpChD,QAAAA,OAAO,CAACiE,OAAR,CAAgBxD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDG,WAAjE,EAA8E4E,CAAC,CAACC,OAAF,EAA9E;AACD,OAFD;AAGA,WAAKiB,SAAL,CAAe7E,MAAf,EA5F4C,CA8F5C;;AACA,UAAIK,MAAM,GAAG,KAAKyE,SAAL,EAAb;AACA,UAAI3E,QAAQ,GAAG,KAAK4E,WAAL,EAAf;AACA,UAAI9E,MAAM,GAAG,KAAK+E,SAAL,EAAb;;AACA,UAAI3E,MAAM,IAAI,EAAEJ,MAAM,IAAI,KAAKgF,iBAAL,EAAZ,CAAd,EAAqD;AACnD,aAAKC,WAAL,CAAiB7E,MAAjB,EACG8E,IADH,CACQ,UAAAC,IAAI,EAAI;AACZ;AACA,cAAI,KAAI,CAACtC,aAAL,EAAJ,EAA0B;AACxB,gBAAIuC,UAAU,GAAG,IAAIjE,UAAU,CAACC,aAAX,CAAyBrB,MAAzB,CAAgCsF,OAApC,EAAjB;AACAD,YAAAA,UAAU,CAACV,OAAX,CAAmBlF,IAAnB;;AACA,gBAAIU,QAAJ,EAAc;AACZ,cAAA,KAAI,CAACoF,WAAL,CAAiB,KAAjB;;AACAF,cAAAA,UAAU,CAACG,MAAX,CAAkBJ,IAAlB;AACD;AACF,WAPD,MAOO;AACL,YAAA,KAAI,CAACK,SAAL,CAAeL,IAAf;;AACA,gBAAIjF,QAAJ,EAAc;AACZ,cAAA,KAAI,CAACoF,WAAL,CAAiB,KAAjB;;AACA,cAAA,KAAI,CAACC,MAAL;AACD;AACF;AACF,SAjBH,WAkBS,UAAA7B,CAAC,EAAI;AACV,gBAAM,IAAI+B,KAAJ,gBAAkBrF,MAAlB,gCAA8CsD,CAAC,CAACgC,OAAhD,OAAN;AACD,SApBH;AAqBD,OAtBD,MAsBO,IAAI1F,MAAM,IAAIE,QAAd,EAAwB;AAC7B,aAAKoF,WAAL,CAAiB,KAAjB;AACA,aAAKC,MAAL;AACD;AACF,KAtPsD;;AAwPvD;;;AAGAI,IAAAA,OAAO,EACP;AACE;;;AAGAC,MAAAA,cAAc,EAAG,IAJnB;AAKEzD,MAAAA,SAAS,EAAG,IALd;;AAQE;;;;;;AAMAe,MAAAA,cAdF,0BAciB2C,EAdjB,EAcqB;AAAA;;AACjB,YAAIC,OAAJ;AACA,YAAIjG,QAAQ,GAAG,KAAKkG,WAAL,EAAf;;AAEA,gBAAQF,EAAR;AACE;;;AAGA,eAAK,MAAL;AAAa;AACX,kBAAIG,QAAQ,GAAG,IAAIhI,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWC,IAAf,EAAf;AACA,kBAAIC,kBAAkB,GAAG,IAAInI,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWG,MAAf,CAAsB,gBAAtB,CAAzB;AACAD,cAAAA,kBAAkB,CAAC1C,WAAnB,CAA+B,SAA/B,EAA0C,KAAK4C,YAA/C,EAA6D,IAA7D;AACAF,cAAAA,kBAAkB,CAAC1D,aAAnB,CAAiC,cAAjC;AACAuD,cAAAA,QAAQ,CAACxE,GAAT,CAAa2E,kBAAb;AACA,kBAAIG,kBAAkB,GAAG,IAAItI,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWG,MAAf,CAAsB,iBAAtB,CAAzB;AACAE,cAAAA,kBAAkB,CAAC7C,WAAnB,CAA+B,SAA/B,EAA0C,KAAK8C,YAA/C,EAA6D,IAA7D;AACAD,cAAAA,kBAAkB,CAAC7D,aAAnB,CAAiC,cAAjC;AACAuD,cAAAA,QAAQ,CAACxE,GAAT,CAAa8E,kBAAb;AACAR,cAAAA,OAAO,GAAG,IAAI9H,EAAE,CAACO,EAAH,CAAMqF,IAAN,CAAW4C,WAAf,EAAV;AACAV,cAAAA,OAAO,CAACrE,GAAR,CAAY;AACVgF,gBAAAA,OAAO,EAAE,KADC;AAEVC,gBAAAA,IAAI,EAAC,yBAFK;AAGVC,gBAAAA,WAAW,EAAE,aAHH;AAIVV,gBAAAA,IAAI,EAAED;AAJI,eAAZ;AAMAF,cAAAA,OAAO,CAACc,gBAAR,CAAyBT,kBAAzB;AACAL,cAAAA,OAAO,CAACc,gBAAR,CAAyBN,kBAAzB;AACAR,cAAAA,OAAO,CAACrC,WAAR,CAAoB,SAApB,EAA+B,KAAKoD,IAApC,EAA0C,IAA1C,EAnBW,CAoBX;;AACA,mBAAK9D,IAAL,CAAU,kBAAV,EAA8B+C,OAA9B,EAAuC,SAAvC,EAAkD;AAChD9C,gBAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,yBAAI,CAACA,CAAL;AAAA;AADoC,eAAlD;AAGA;AACD;;AACD;;;;AAGA,eAAK,QAAL;AAAe;AACb6C,cAAAA,OAAO,GAAG,IAAI3E,UAAU,CAACC,aAAX,CAAyB0F,iBAA7B,EAAV;AACA,kBAAIC,UAAU,GAAG,IAAI/I,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWC,IAAf,EAAjB;AACAJ,cAAAA,OAAO,CAACc,gBAAR,CAAyBG,UAAzB,EAAqC,MAArC;AACA,kBAAIC,WAAW,GAAG,IAAIhJ,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWG,MAAf,CAAsB,QAAtB,CAAlB;AACAW,cAAAA,UAAU,CAACvF,GAAX,CAAewF,WAAf;AACA,kBAAIC,SAAS,GAAG,IAAIjJ,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWC,IAAf,EAAhB;AACAc,cAAAA,WAAW,CAACE,OAAZ,CAAoBD,SAApB;AACA,mBAAKxD,WAAL,CAAiB,cAAjB,EAAiC,YAAM;AACrC,oBAAI1D,MAAM,GAAG,MAAI,CAACyD,SAAL,EAAb;;AACA,oBAAI,CAACzD,MAAL,EAAa;AACX;AACD;;AACD,oBAAMoH,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBF,4BAAAA,SAAS,CAACG,SAAV;AADiB;AAAA;AAAA;AAAA;;AAAA;AAAA,kCAERC,IAFQ;AAGf,kCAAIC,WAAW,GAAGvH,MAAM,CAACwH,mBAAP,CAA2BF,IAA3B,CAAlB;AACA,kCAAIG,KAAK,GAAGF,WAAW,CAACG,IAAZ,KAAsBJ,IAAI,GAAG,IAAP,GAAcC,WAApC,GAAmDD,IAA/D;AACA,kCAAIK,UAAU,GAAG,IAAI1J,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWG,MAAf,CAAsBoB,KAAtB,CAAjB;AACAE,8BAAAA,UAAU,CAACjE,WAAX,CAAuB,SAAvB;AAAA;AAAA;AAAA;AAAA,sDAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BkE,wCAAAA,KAD4B,GACpB5H,MAAM,CAAC6H,kBAAP,CAA0BP,IAA1B,EAAgCQ,IAAhC,CAAqC,IAArC,CADoB;AAAA;AAAA,+CAE1B9H,MAAM,CAACwF,MAAP,CAAcoC,KAAd,CAF0B;;AAAA;AAGhCxG,wCAAAA,UAAU,CAACC,aAAX,CAAyB0G,QAAzB,CAAkC/G,WAAlC,GAAgDgH,IAAhD;;AAHgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAlC;AAKAd,8BAAAA,SAAS,CAACzF,GAAV,CAAckG,UAAd;AAXe;;AAEjB,6CAAiB3H,MAAM,CAACiI,aAAP,GAAuBC,OAAvB,EAAjB,uHAAmD;AAAA;AAUlD;;AAZgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAH;;AAAA,kCAAVd,UAAU;AAAA;AAAA;AAAA,mBAAhB;;AAcApH,gBAAAA,MAAM,CAAC0D,WAAP,CAAmB,cAAnB,EAAmC,YAAK;AACtC0D,kBAAAA,UAAU;AACVpH,kBAAAA,MAAM,CAACmI,SAAP,GAAmBC,QAAnB,GAA8B1E,WAA9B,CAA0C,QAA1C,EAAoD0D,UAApD;AACD,iBAHD;AAID,eAvBD;AAyBAJ,cAAAA,UAAU,CAACqB,YAAX;AACArB,cAAAA,UAAU,CAACvF,GAAX,CAAe,IAAIxD,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWG,MAAf,CAAsB,UAAtB,CAAf;AACA,kBAAIiC,YAAY,GAAG,IAAIrK,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWqC,QAAf,CAAwB,2BAAxB,CAAnB;AACA,mBAAKvF,IAAL,CAAU,oBAAV,EAAgCsF,YAAhC,EAA8C,OAA9C;AACAA,cAAAA,YAAY,CAACtF,IAAb,CAAkB,OAAlB,EAA2B,IAA3B,EAAiC,oBAAjC;AACAgE,cAAAA,UAAU,CAACvF,GAAX,CAAe6G,YAAf;AACAvC,cAAAA,OAAO,CAACrC,WAAR,CAAoB,SAApB,EAA+B,KAAK8E,YAApC,EAAkD,IAAlD;AACAzC,cAAAA,OAAO,CAACrE,GAAR,CAAY;AACVgF,gBAAAA,OAAO,EAAE,KADC;AAEVC,gBAAAA,IAAI,EAAC,0BAFK;AAGVC,gBAAAA,WAAW,EAAE,eAHH;AAIVV,gBAAAA,IAAI,EAAEc;AAJI,eAAZ,EAxCa,CA8Cb;;AACA,mBAAKhE,IAAL,CAAU,QAAV,EAAoB+C,OAApB,EAA6B,YAA7B,EAA2C;AACzC9C,gBAAAA,SAAS,EAAE,mBAAAjD,MAAM;AAAA,yBAAIwD,OAAO,CAACxD,MAAD,CAAP,IAAmBA,MAAM,CAACyI,qBAAP,EAAnB,GAAoD,SAApD,GAAgE,UAApE;AAAA;AADwB,eAA3C;AAGA,mBAAKzF,IAAL,CAAU,kBAAV,EAA8B+C,OAA9B,EAAuC,SAAvC,EAAkD;AAChD9C,gBAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,yBAAI,CAACA,CAAL;AAAA;AADoC,eAAlD;AAGA,mBAAKF,IAAL,CAAU,gBAAV,EAA4B+C,OAA5B,EAAqC,OAArC;AACA;AACD;;AACD;;;;AAGA,eAAK,QAAL;AAAe;AACb,kBAAI2C,UAAU,GAAG,IAAIzK,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWC,IAAf,EAAjB;AACAuC,cAAAA,UAAU,CAACjH,GAAX,CAAe,IAAIxD,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWG,MAAf,CAAsB,UAAtB,CAAf;AACA,kBAAIsC,WAAW,GAAG,IAAI1K,EAAE,CAACO,EAAH,CAAM0H,IAAN,CAAWqC,QAAf,CAAwB,gBAAxB,CAAlB;AACAI,cAAAA,WAAW,CAAC3F,IAAZ,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC,oBAAhC;AACA0F,cAAAA,UAAU,CAACjH,GAAX,CAAekH,WAAf;AACA5C,cAAAA,OAAO,GAAG,IAAI3E,UAAU,CAACC,aAAX,CAAyB0F,iBAA7B,EAAV;AACAhB,cAAAA,OAAO,CAAC6C,OAAR,CAAgB,2BAAhB;AACA7C,cAAAA,OAAO,CAACoB,OAAR,CAAgBuB,UAAhB;AACA3C,cAAAA,OAAO,CAACrC,WAAR,CAAoB,aAApB,EAAmC,KAAKmF,aAAxC,EAAuD,IAAvD;AACA/I,cAAAA,QAAQ,CAACkD,IAAT,CAAc,SAAd,EAAyB+C,OAAzB,EAAkC,OAAlC;AACAjG,cAAAA,QAAQ,CAACkD,IAAT,CAAc,SAAd,EAAyB+C,OAAzB,EAAkC,SAAlC,EAA6C;AAC3C9C,gBAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,yBAAI,CAACA,CAAL;AAAA;AAD+B,eAA7C;AAGA,mBAAKF,IAAL,CAAU,MAAV,EAAkB+C,OAAlB,EAA2B,SAA3B,EAAsC;AACpC9C,gBAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,yBAAIA,CAAC,KAAK,UAAV;AAAA;AADwB,eAAtC;AAGA;AACD;;AACD;;;;AAGA,eAAK,MAAL;AAAa;AACX6C,cAAAA,OAAO,GAAG,IAAI9H,EAAE,CAACO,EAAH,CAAMqF,IAAN,CAAWwC,MAAf,EAAV;AACAN,cAAAA,OAAO,CAACrE,GAAR,CAAY;AACVgF,gBAAAA,OAAO,EAAE,KADC;AAEVC,gBAAAA,IAAI,EAAE,yBAFI;AAGVC,gBAAAA,WAAW,EAAE;AAHH,eAAZ;AAKAb,cAAAA,OAAO,CAACrC,WAAR,CAAoB,SAApB,EAA+B,KAAKoF,IAApC,EAA0C,IAA1C;AACA;AACD;;AACD;;;;AAGA,eAAK,MAAL;AAAa;AACX/C,cAAAA,OAAO,GAAG,IAAI9H,EAAE,CAACO,EAAH,CAAMqF,IAAN,CAAWwC,MAAf,EAAV;AACAN,cAAAA,OAAO,CAACrE,GAAR,CAAY;AACVgF,gBAAAA,OAAO,EAAE,IADC;AAEVC,gBAAAA,IAAI,EAAC,yBAFK;AAGVC,gBAAAA,WAAW,EAAE;AAHH,eAAZ;AAKAb,cAAAA,OAAO,CAACrC,WAAR,CAAoB,SAApB,EAA+B,KAAKqF,IAApC,EAA0C,IAA1C;AACA,mBAAK/F,IAAL,CAAU,kBAAV,EAA8B+C,OAA9B,EAAuC,SAAvC,EAAkD;AAChD9C,gBAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,yBAAI,CAACA,CAAL;AAAA;AADoC,eAAlD,EARW,CAWX;AACA;AACA;;AACA;AACD;;AACD;;;;AAGA,eAAK,MAAL;AAAa;AACX6C,cAAAA,OAAO,GAAG,IAAI9H,EAAE,CAACO,EAAH,CAAMqF,IAAN,CAAWwC,MAAf,EAAV;AACAN,cAAAA,OAAO,CAACrE,GAAR,CAAY;AACVgF,gBAAAA,OAAO,EAAE,KADC;AAEVC,gBAAAA,IAAI,EAAC,yBAFK;AAGVC,gBAAAA,WAAW,EAAE;AAHH,eAAZ;AAKAb,cAAAA,OAAO,CAACrC,WAAR,CAAoB,SAApB,EAA+B,KAAKsF,IAApC,EAA0C,IAA1C;AACA,mBAAKhG,IAAL,CAAU,kBAAV,EAA8B+C,OAA9B,EAAuC,SAAvC,EAAkD;AAChD9C,gBAAAA,SAAS,EAAE,mBAAAC,CAAC;AAAA,yBAAI,CAACA,CAAL;AAAA;AADoC,eAAlD;AAGA;AACD;;AACD;AACE,kBAAM,IAAIwC,KAAJ,oBAAsBI,EAAtB,uBAAN;AAhKJ,SAJiB,CAsKjB;;;AACA,aAAKrE,GAAL,CAASsE,OAAT;AACA,aAAKc,gBAAL,CAAsBd,OAAtB,EAA+BD,EAA/B;AACA,eAAOC,OAAP;AACD,OAxLH;;AA0LE;;;;;AAKAtF,MAAAA,wBA/LF,sCA+L6B;AACzB,eAAO;AACLC,UAAAA,GAAG,EAAEzC,EAAE,CAAC0E,IAAH,CAAQsG,WADR;AAELtI,UAAAA,OAAO,EAAE1C,EAAE,CAACiL,GAAH,CAAOvI,OAAP,CAAewI,GAAf,CAAmBC,UAAnB,EAFJ;AAGLxI,UAAAA,UAAU,EAAE3C,EAAE,CAAC6C,IAAH,CAAQuI,GAAR,CAAYC,QAAZ,CAAqB7K,MAAM,CAAC8K,QAAP,CAAgBC,IAArC;AAHP,SAAP;AAKD,OArMH;;AAuME;;;;;;;AAOArH,MAAAA,6BA9MF,2CA8MkC;AAAA,qCACG,KAAK1B,wBAAL,EADH;AAAA,YACzBC,GADyB,0BACzBA,GADyB;AAAA,YACpBC,OADoB,0BACpBA,OADoB;AAAA,YACXC,UADW,0BACXA,UADW;;AAE9B,YAAIX,MAAM,GAAGU,OAAO,CAAC8D,OAAR,CAAgBrD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDC,MAAjE,KAA4E,EAAzF;AACA,aAAK4K,UAAL,CAAgBxJ,MAAhB;AACA,YAAIE,QAAQ,GAAGS,UAAU,CAACyD,QAAX,CAAoBqF,sBAApB,IACb/I,OAAO,CAAC8D,OAAR,CAAgBrD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDK,QAAjE,CADa,IAEbyB,GAAG,CAAC6D,GAAJ,CAAQnD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDK,QAAzD,CAFa,IAGb,KAHF;AAIA,aAAK0K,YAAL,CAAkBxJ,QAAlB;AACA,YAAIC,kBAAkB,GAAGO,OAAO,CAAC8D,OAAR,CAAgBrD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDQ,oBAAjE,CAAzB;AACA,aAAKwK,sBAAL,CAA4BxJ,kBAAkB,KAAK,IAAvB,GAA8B,KAA9B,GAAsCA,kBAAlE;AACA,YAAIC,MAAM,GAAGO,UAAU,CAACyD,QAAX,CAAoBwF,qBAApB,IAA6CnJ,GAAG,CAAC6D,GAAJ,CAAQnD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDI,OAAzD,CAA7C,IAAkH,IAA/H;AACA,aAAK8K,UAAL,CAAgBzJ,MAAhB;AACA,YAAIC,UAAU,GAAGkD,OAAO,CAAC5C,UAAU,CAACyD,QAAX,CAAoB0F,wBAArB,CAAP,IAAyD9L,EAAE,CAAC0E,IAAH,CAAQsG,WAAR,CAAoB1E,GAApB,CAAwBnD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDO,UAAzE,CAAzD,IAAiJ,KAAlK;AACA,aAAK6K,cAAL,CAAoB1J,UAApB,EAd8B,CAe9B;AACD,OA9NH;AAgOE2J,MAAAA,UAhOF,sBAgOaC,KAhOb,EAgOoBC,GAhOpB,EAgOyB;AACrB,YAAID,KAAK,KAAK,QAAV,IAAsB,CAAC,KAAKzG,SAAL,EAA3B,EAA6C;AAC3C,gBAAM,IAAIiC,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF,OApOH;;AAsOE;;;;;;AAMA0E,MAAAA,YA5OF,wBA4OeF,KA5Of,EA4OsBC,GA5OtB,EA4O2B;AACvBlM,QAAAA,EAAE,CAACiL,GAAH,CAAOvI,OAAP,CAAewI,GAAf,CAAmBC,UAAnB,GAAgCxE,OAAhC,CAAwCxD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDC,MAAzF,EAAiGqL,KAAjG;;AACA,YAAI,KAAKlE,WAAL,EAAJ,EAAwB;AACtB,eAAKA,WAAL,GAAmBP,SAAnB,CAA6ByE,KAA7B;AACD;AACF,OAjPH;AAmPEG,MAAAA,cAnPF,4BAmPmB;AACfpM,QAAAA,EAAE,CAACiL,GAAH,CAAOvI,OAAP,CAAewI,GAAf,CAAmBC,UAAnB,GAAgCxE,OAAhC,CAAwCxD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDS,UAAzF,EAAqGyE,QAAQ,CAACyF,QAAT,CAAkBC,IAAvH;AACD,OArPH;AAuPEvE,MAAAA,iBAvPF,+BAuPsB;AAClB,eAAOhH,EAAE,CAACiL,GAAH,CAAOvI,OAAP,CAAewI,GAAf,CAAmBC,UAAnB,GAAgC3E,OAAhC,CAAwCrD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDS,UAAzF,MAAyGyE,QAAQ,CAACyF,QAAT,CAAkBC,IAAlI;AACD,OAzPH;AA2PEc,MAAAA,YA3PF,wBA2PeJ,KA3Pf,EA2PsBC,GA3PtB,EA2P2B,CACvB;AACD,OA7PH;;AA+PE;;;;;;AAMAI,MAAAA,cArQF,0BAqQiBL,KArQjB,EAqQwBC,GArQxB,EAqQ6B;AACzBlM,QAAAA,EAAE,CAACiL,GAAH,CAAOvI,OAAP,CAAewI,GAAf,CAAmBC,UAAnB,GAAgCxE,OAAhC,CAAwCxD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDK,QAAzF,EAAmGiL,KAAnG;AACD,OAvQH;;AAyQE;;;;;;AAMAM,MAAAA,wBA/QF,oCA+Q2BN,KA/Q3B,EA+QkCC,GA/QlC,EA+QuC;AACnClM,QAAAA,EAAE,CAACiL,GAAH,CAAOvI,OAAP,CAAewI,GAAf,CAAmBC,UAAnB,GAAgCxE,OAAhC,CAAwCxD,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsC1C,UAAtC,CAAiDQ,oBAAzF,EAA+G8K,KAA/G;AACD,OAjRH;;AAmRE;;;;AAIArB,MAAAA,aAvRF,yBAuRgBlF,CAvRhB,EAuRmB;AACf,YAAIA,CAAC,CAACC,OAAF,EAAJ,EAAiB;AACf,eAAK6G,MAAL;AACD;AACF,OA3RH;;AA6RE;;;;AAIAjC,MAAAA,YAjSF,0BAiSiB;AACb;AACA,YAAI,KAAKxD,SAAL,MAAoB,KAAKF,SAAL,EAAxB,EAA0C;AACxC,cAAI,KAAK4F,qBAAL,EAAJ,EAAkC;AAChC;AACA,iBAAKnF,WAAL,CAAiB,IAAjB;AACA9G,YAAAA,MAAM,CAAC8K,QAAP,CAAgBoB,MAAhB;AACD,WAJD,MAIO,IAAI,KAAK3F,SAAL,EAAJ,EAAsB;AAC3B,iBAAKQ,MAAL;AACD,WAFM,MAEA;AACL,iBAAKoF,WAAL,CAAiB,QAAjB,EAA2BC,QAA3B,CAAoC,KAApC;AACD;AACF;AACF,OA9SH;;AAgTE;;;;;AAKMC,MAAAA,OArTR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAsTW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,wBAAI9G,KAAK,GAAGL,QAAQ,CAACoH,cAAT,CAAwB9J,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsChC,aAA9D,CAAZ;AACA6E,oBAAAA,KAAK,CAACgH,gBAAN,CAAuB,QAAvB,EAAiC,UAAAxH,CAAC,EAAI;AACpC,0BAAIyH,IAAI,GAAGzH,CAAC,CAAC0H,MAAF,CAASC,KAAT,CAAe,CAAf,CAAX;;AACA,0BAAI,CAACF,IAAI,CAAC9D,IAAL,CAAUiE,QAAV,CAAmB,gBAAnB,CAAL,EAA2C;AACzCN,wBAAAA,MAAM,CAAC,IAAIvF,KAAJ,CAAU,6BAAV,CAAD,CAAN;AACD;;AACD,0BAAI8F,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAD,sBAAAA,MAAM,CAACL,gBAAP,CAAwB,SAAxB,EAAmC,YAAM;AACvCH,wBAAAA,OAAO,CAACQ,MAAM,CAACE,MAAR,CAAP;AACD,uBAFD;AAGAF,sBAAAA,MAAM,CAACL,gBAAP,CAAwB,OAAxB,EAAiCF,MAAjC;AACAO,sBAAAA,MAAM,CAACG,UAAP,CAAkBP,IAAlB;AACD,qBAXD;AAYAjH,oBAAAA,KAAK,CAACyH,KAAN;AACD,mBAfM,CAtTX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAwUE;;;;;;AAMAC,MAAAA,SA9UF,qBA8UYC,QA9UZ,EA8UsBC,IA9UtB,EA8U4B;AACxB,YAAIC,OAAO,GAAGlI,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAd;AACAiI,QAAAA,OAAO,CAAChI,YAAR,CAAqB,MAArB,EAA6B,mCAAmCiI,kBAAkB,CAACF,IAAD,CAAlF;AACAC,QAAAA,OAAO,CAAChI,YAAR,CAAqB,UAArB,EAAiC8H,QAAjC;AACAE,QAAAA,OAAO,CAACE,KAAR,CAAcC,OAAd,GAAwB,MAAxB;AACArI,QAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0B8H,OAA1B;AACAA,QAAAA,OAAO,CAACJ,KAAR;AACA9H,QAAAA,QAAQ,CAACG,IAAT,CAAcmI,WAAd,CAA0BJ,OAA1B;AACD,OAtVH;;AAwVE;;;;;;AAMA9G,MAAAA,WAAW;AAAA;AAAA;AAAA,gCAAE,kBAAgBmH,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,oDACJ,IAAItB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,wBAAIqB,GAAG,0CAAmCD,OAAnC,CAAP;AACA,wBAAIE,GAAG,GAAG,IAAItO,EAAE,CAACuO,EAAH,CAAMC,OAAN,CAAcC,KAAlB,CAAwBJ,GAAxB,CAAV;AACAC,oBAAAA,GAAG,CAAC7I,WAAJ,CAAgB,SAAhB,EAA2B,UAAAC,CAAC,EAAI;AAC9B,0BAAIgJ,QAAQ,GAAGJ,GAAG,CAACK,WAAJ,EAAf;;AACA,0BAAI,CAAC3O,EAAE,CAAC4O,IAAH,CAAQC,IAAR,CAAaC,QAAb,CAAsBJ,QAAQ,CAACK,IAAT,CAAc1B,KAApC,CAAL,EAAiD;AAC/CL,wBAAAA,MAAM,CAAC,IAAIvF,KAAJ,CAAU,0BAA0BuH,IAAI,CAACC,SAAL,CAAeP,QAAf,CAApC,CAAD,CAAN;AACD;;AACD,0BAAIQ,SAAS,GAAGjM,MAAM,CAACkM,mBAAP,CAA2BT,QAAQ,CAACK,IAAT,CAAc1B,KAAzC,CAAhB;AACA,0BAAIF,IAAI,GAAGuB,QAAQ,CAACK,IAAT,CAAc1B,KAAd,CAAoB6B,SAAS,CAAC,CAAD,CAA7B,CAAX;;AACA,0BAAI,CAAC/B,IAAI,CAACU,QAAL,CAAcP,QAAd,CAAuB,gBAAvB,CAAL,EAA+C;AAC7CN,wBAAAA,MAAM,CAAC,IAAIvF,KAAJ,CAAU,qCAAV,CAAD,CAAN;AACD;;AACD,0BAAIzF,MAAM,GAAGmL,IAAI,CAACiC,OAAlB;AACArC,sBAAAA,OAAO,CAAC/K,MAAD,CAAP;AACD,qBAZD;AAaAsM,oBAAAA,GAAG,CAAC7I,WAAJ,CAAgB,aAAhB,EAA+B,UAAAC,CAAC;AAAA,6BAAIsH,MAAM,CAAC,IAAIvF,KAAJ,CAAU/B,CAAC,CAACC,OAAF,EAAV,CAAD,CAAV;AAAA,qBAAhC;AACA2I,oBAAAA,GAAG,CAACe,IAAJ;AACD,mBAlBM,CADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SA9Vb;;AAoXE;;;;;;AAMAC,MAAAA,mBA1XF,iCA0XwB;AACpB,eAAO9O,MAAM,CAACqF,QAAP,CAAgByF,QAAhB,CAAyBiE,QAAzB,CAAkCC,KAAlC,CAAwC,GAAxC,EAA6CC,KAA7C,CAAmD,CAAC,CAApD,EAAuD,CAAC,CAAxD,EAA2D5F,IAA3D,CAAgE,EAAhE,CAAP;AACD,OA5XH;;AA8XE;;;;;AAKA6F,MAAAA,aAnYF,yBAmYgBC,GAnYhB,EAmYqB;AAAA;;AACjBC,QAAAA,OAAO,CAACC,QAAR,CAAiBC,OAAjB,CAAyBC,YAAzB,CACE/P,EAAE,CAAC6C,IAAH,CAAQmN,eAAR,CAAwBjN,WAAxB,GAAsCkN,KAAtC,CAA4C,2CAA5C,CADF,EAC4F,IAD5F,EAEE,UAAAC,SAAS,EAAI;AACX,cAAIC,WAAW,GAAGnQ,EAAE,CAACoQ,GAAH,CAAOC,QAAP,CAAgBC,UAAhB,CAA2BJ,SAA3B,CAAlB;AACA,cAAIK,MAAM,GAAGX,OAAO,CAACE,OAAR,CAAgBU,gBAAhB,EAAb;AACA,cAAIC,aAAa,GAAGF,MAAM,CAACG,gBAAP,CAAwBP,WAAxB,CAApB;AACAM,UAAAA,aAAa,CAAChM,aAAd,CAA4B,QAA5B;;AACA,UAAA,MAAI,CAACmE,gBAAL,CAAsB6H,aAAtB;;AACA,cAAIE,YAAY,GAAGF,aAAa,CAACG,aAAd,EAAnB;AACAjB,UAAAA,GAAG,CAACnM,GAAJ,CAAQmN,YAAR;AACAhB,UAAAA,GAAG,CAAClL,aAAJ,CAAkB,QAAlB;AACAgM,UAAAA,aAAa,CAAC7H,gBAAd,CAA+B+G,GAA/B;AACAgB,UAAAA,YAAY,CAAClL,WAAb,CAAyB,QAAzB,EAAmC;AAAA,mBAAMgL,aAAa,CAACI,QAAd,GAAyBC,oBAAzB,CAA8C,MAAI,CAAC/J,SAAL,EAA9C,CAAN;AAAA,WAAnC;;AACA,UAAA,MAAI,CAAChC,IAAL,CAAU,QAAV,EAAoB0L,aAAa,CAACI,QAAd,EAApB,EAA8C,mBAA9C;;AACA,cAAIE,SAAS,GAAGN,aAAa,CAACI,QAAd,EAAhB;AACAE,UAAAA,SAAS,CAAChM,IAAV,CAAe,mBAAf,EAAoC,MAApC,EAA0C,QAA1C;AACAgM,UAAAA,SAAS,CAACtL,WAAV,CAAsB,wBAAtB,EAAgD,UAAAC,CAAC;AAAA,mBAAI,MAAI,CAACsL,WAAL,CAAiBD,SAAS,CAACE,mBAAV,EAAjB,EAAkDF,SAAS,CAACG,aAAV,EAAlD,CAAJ;AAAA,WAAjD;AACAH,UAAAA,SAAS,CAACtL,WAAV,CAAsB,kBAAtB,EAA0C,UAAAC,CAAC;AAAA,mBAAI,MAAI,CAACsL,WAAL,CAAiBD,SAAS,CAACE,mBAAV,EAAjB,EAAkDF,SAAS,CAACG,aAAV,EAAlD,CAAJ;AAAA,WAA3C;AACAlR,UAAAA,EAAE,CAAC0B,KAAH,CAASyP,KAAT,CAAeC,IAAf,CAAoB;AAAA,mBAAM,MAAI,CAACC,mBAAL,EAAN;AAAA,WAApB,EAAsD,MAAtD,EAA4D,IAA5D;AACAd,UAAAA,MAAM,CAACe,OAAP;;AACA,UAAA,MAAI,CAACxG,IAAL;AACD,SArBH;AAsBD,OA1ZH;;AA4ZE;;;;AAIAuG,MAAAA,mBAhaF,iCAgayB;AACrB,YAAME,SAAS,GAAGC,GAAG,CAACC,OAAJ,CAAY,wBAAZ,CAAlB;;AACA,YAAIC,MAAM,GAAG,EAAb;AACA,YAAIC,KAAK,GAAG3R,EAAE,CAAC4R,SAAH,CAAaC,SAAb,CAAuB,kCAAvB,EAA2DC,SAAvE;AAHqB;AAAA;AAAA;;AAAA;AAIrB,gCAAgB7O,MAAM,CAACkM,mBAAP,CAA2BwC,KAA3B,CAAhB,mIAAmD;AAAA,gBAA1CI,GAA0C;;AACjD,gBAAIA,GAAG,CAACC,UAAJ,CAAe,MAAf,KAA0B,OAAOL,KAAK,CAACI,GAAD,CAAZ,IAAqB,UAAnD,EAA+D;AAC7D,kBAAIE,IAAI,GAAGN,KAAK,CAACI,GAAD,CAAL,CAAWG,QAAX,EAAX;AACA,kBAAIC,MAAM,GAAGF,IAAI,CAACxC,KAAL,CAAWwC,IAAI,CAACG,OAAL,CAAa,GAAb,IAAoB,CAA/B,EAAkCH,IAAI,CAACG,OAAL,CAAa,GAAb,CAAlC,EAAqD5C,KAArD,CAA2D,GAA3D,EAAgE6C,GAAhE,CAAoE,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CAAC7I,IAAF,EAAJ;AAAA,eAArE,CAAb;AACA,kBAAIlH,OAAO,GAAGwP,GAAG,CAACQ,MAAJ,CAAW,CAAX,EAAchO,OAAd,CAAsB,IAAtB,EAA4B,GAA5B,CAAd;AACA,kBAAIiO,OAAO,GAAGjQ,OAAO,GAAG,GAAV,GAAgB4P,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD,EAAIG,CAAJ;AAAA,mCAAgBA,CAAC,GAAC,CAAlB,cAAuBH,CAAvB;AAAA,eAAX,EAAwCzI,IAAxC,CAA6C,GAA7C,CAAhB,GAAoE,KAAlF;AACA,kBAAI6I,IAAI,GAAGP,MAAM,CAACtI,IAAP,CAAY,GAAZ,CAAX;AACA,kBAAIoC,KAAK,GAAG,IAAZ;AACAyF,cAAAA,MAAM,CAACiB,IAAP,CAAY;AAACpQ,gBAAAA,OAAO,EAAPA,OAAD;AAAUqQ,gBAAAA,IAAI,EAAE,SAAhB;AAA2BJ,gBAAAA,OAAO,EAAPA,OAA3B;AAAoCE,gBAAAA,IAAI,EAAJA,IAApC;AAA0CzG,gBAAAA,KAAK,EAALA;AAA1C,eAAZ;AACD;AACF;AAdoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAerB,YAAI4G,GAAG,GAAG,EAAV;;AACA,YAAIC,kBAAkB,GAAG,SAArBA,kBAAqB,CAASC,GAAT,EAAc;AACrC,cAAI,OAAOA,GAAG,CAACC,aAAX,KAA6B,UAAjC,EAA6C;AAC3C;AACD;;AACD,cAAInL,EAAE,GAAGkL,GAAG,CAACC,aAAJ,EAAT;;AACA,cAAInL,EAAJ,EAAQ;AACNgL,YAAAA,GAAG,CAACF,IAAJ,CAAS3S,EAAE,CAAC0E,IAAH,CAAQC,EAAR,CAAWsO,eAAX,CAA2BF,GAA3B,CAAT;AACD;;AAPoC;AAAA;AAAA;;AAAA;AAQrC,kCAAkBA,GAAG,CAACG,iBAAJ,EAAlB,mIAA2C;AAAA,kBAAlCC,KAAkC;AACzCL,cAAAA,kBAAkB,CAACK,KAAD,CAAlB;AACD;AAVoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtC,SAXD;;AAYA,YAAIC,iBAAiB,GAAGnQ,MAAM,CAACoQ,MAAP,CAAcrT,EAAE,CAAC0E,IAAH,CAAQC,EAAR,CAAW5B,WAAX,GAAyBuQ,mBAAvC,CAAxB,CA5BqB,CA4BgE;;AACrF,+CAAgBF,iBAAhB,0CAAmC;AAA9B,cAAIL,GAAG,0BAAP;AACHD,UAAAA,kBAAkB,CAACC,GAAD,CAAlB;AACD;;AACD,iCAAeF,GAAf,4BAAoB;AAAf,cAAIhL,EAAE,YAAN;AACH6J,UAAAA,MAAM,CAACiB,IAAP,CAAY;AAACpQ,YAAAA,OAAO,EAAEsF,EAAV;AAAc+K,YAAAA,IAAI,EAAE,IAApB;AAA0B3G,YAAAA,KAAK,EAAEpE;AAAjC,WAAZ;AACD;;AACD,YAAM9F,MAAM,GAAG,KAAKyD,SAAL,EAAf;AACA,YAAM+N,SAAS,GAAG;AAChBC,UAAAA,cAAc,EAAE,wBAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwCC,QAAxC,EAAkD;AAChE,gBAAID,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACvBD,cAAAA,QAAQ,CAAC,IAAD,EAAO,EAAP,CAAR;AACA;AACD;;AACD,gBAAIE,IAAI,GAAGN,MAAM,CAACC,OAAP,CAAeM,OAAf,CAAuBL,GAAG,CAACM,GAA3B,EAAgC1B,MAAhC,CAAuC,CAAvC,EAA0CoB,GAAG,CAACO,MAA9C,CAAX;;AACA,gBAAIC,cAAc,GAAGpS,MAAM,CAACqS,SAAP,CAAiBL,IAAjB,EAAuBD,MAA5C;;AACA,gBAAIO,OAAO,GAAG3C,MAAM,CACpB;AADoB,aAEjB4C,MAFW,CAEJ,UAAAC,KAAK;AAAA,qBAAKA,KAAK,CAAC3B,IAAN,KAAe,SAAf,IAA4BuB,cAAc,KAAK,CAAhD,IAAuDI,KAAK,CAAC3B,IAAN,KAAe,IAAf,IAAuBuB,cAAc,KAAK,CAArG;AAAA,aAFD,EAGZ;AAHY,aAIXG,MAJW,CAIJ,UAAAC,KAAK;AAAA,qBAAIA,KAAK,CAAChS,OAAN,CAAciC,iBAAd,GAAkC+N,MAAlC,CAAyC,CAAzC,EAA4CqB,MAAM,CAACE,MAAnD,MAA+DF,MAAM,CAACpP,iBAAP,EAAnE;AAAA,aAJD,EAKZ;AALY,aAMX6N,GANW,CAMP,UAAAkC,KAAK,EAAI;AACZA,cAAAA,KAAK,CAACC,KAAN,GAAc,OAAOD,KAAK,CAAChS,OAAN,CAAcuR,MAAd,GAAuBF,MAAM,CAACE,MAArC,CAAd;AACA,qBAAOS,KAAP;AACD,aATW,CAAd;AAUAV,YAAAA,QAAQ,CAAC,IAAD,EAAOQ,OAAP,CAAR;AACD;AAnBe,SAAlB;AAqBA9C,QAAAA,SAAS,CAACkD,YAAV,CAAuBlB,SAAvB;AACD,OA1dH;;AA4dE;;;;;;AAMA;;;;;;AAMA9M,MAAAA,eAxeF,2BAwekBmM,IAxelB,EAwewB;AACpB,YAAI,CAACA,IAAL,EAAW;AACT,gBAAM,IAAInL,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,YAAI,KAAKtD,SAAL,CAAeyO,IAAf,CAAJ,EAA0B;AACxB,iBAAO,KAAKzO,SAAL,CAAeyO,IAAf,CAAP;AACD;;AACD,YAAI8B,KAAK,GAAGvR,UAAU,CAACC,aAAX,CAAyBrB,MAAzB,CAAgC/B,EAAE,CAAC4O,IAAH,CAAQ+F,MAAR,CAAeC,OAAf,CAAuBhC,IAAvB,CAAhC,CAAZ;;AACA,YAAI,CAAC8B,KAAL,EAAY;AACV,gBAAM,IAAIjN,KAAJ,6BAA+BmL,IAA/B,uBAAN;AACD;;AACD,YAAM7Q,MAAM,GAAG,IAAI2S,KAAJ,EAAf;AACA,aAAKvQ,SAAL,CAAeyO,IAAf,IAAuB7Q,MAAvB;AACA,eAAOA,MAAP;AACD,OAtfH;;AAwfE;;;AAGMyK,MAAAA,MA3fR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4fQ3K,kBAAAA,QA5fR,GA4fmB,KAAKkG,WAAL,EA5fnB;;AAAA,wBA6fQ,KAAKhB,SAAL,GAAiB0C,IAAjB,OAA0B,EAA1B,IAAgC,CAAC,KAAK5E,aAAL,EA7fzC;AAAA;AAAA;AAAA;;AAAA;AAAA,yBA8fuBgQ,MAAM,CAACC,MAAP,CAAcC,MAAd,CACf,4DADe,EAEf,CACE;AAACvL,oBAAAA,KAAK,EAAE,QAAR;AAAkByC,oBAAAA,KAAK,EAAE;AAAzB,mBADF,EAEE;AAACzC,oBAAAA,KAAK,EAAE,WAAR;AAAqByC,oBAAAA,KAAK,EAAE;AAA5B,mBAFF,CAFe,EAMf+I,OANe,EA9fvB;;AAAA;AA8fUxT,kBAAAA,IA9fV;;AAAA,sBAqgBWA,IArgBX;AAAA;AAAA;AAAA;;AAsgBQ,uBAAKmL,WAAL,CAAiB,QAAjB,EAA2BC,QAA3B,CAAoC,KAApC;AAtgBR;;AAAA;AAygBM/K,kBAAAA,QAAQ,CAAC6E,OAAT,CAAiBlF,IAAjB;;AAzgBN;AA2gBIK,kBAAAA,QAAQ,CAACoT,KAAT;;AA3gBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA8gBE;;;AAGApK,MAAAA,IAjhBF,kBAihBS;AACL,YAAI,KAAK9C,WAAL,GAAmBzC,SAAnB,EAAJ,EAAoC;AAClC,eAAKyC,WAAL,GAAmB8C,IAAnB;AACA,cAAI7I,MAAM,GAAG,KAAK+F,WAAL,GAAmBhB,SAAnB,EAAb;;AACA,eAAKqF,cAAL;;AACA,eAAK5E,SAAL,CAAexF,MAAf;AACD;;AACD,YAAI,KAAKwD,SAAL,MAAoB,KAAKA,SAAL,GAAiBF,SAAjB,EAAxB,EAAsD;AACpD,eAAKE,SAAL,GAAiBqF,IAAjB;AACD;AACF,OA3hBH;;AA6hBE;;;;AAIMtD,MAAAA,MAjiBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAkiBS,KAAKR,SAAL,EAliBT;AAAA;AAAA;AAAA;;AAAA,wBAmiBY,IAAIU,KAAJ,CAAU,qBAAV,CAniBZ;;AAAA;AAqiBQ1F,kBAAAA,MAriBR,GAqiBiB,KAAKyD,SAAL,EAriBjB;;AAAA,sBAsiBSzD,MAtiBT;AAAA;AAAA;AAAA;;AAAA,wBAuiBY,IAAI0F,KAAJ,CAAU,wBAAV,CAviBZ;;AAAA;AAyiBI,uBAAKf,OAAL,CAAa,QAAb;AACIwO,kBAAAA,QA1iBR,GA0iBmB/R,UAAU,CAACC,aAAX,CAAyB0G,QAAzB,CAAkC/G,WAAlC,EA1iBnB;AA2iBImS,kBAAAA,QAAQ,CAACC,OAAT,CAAiB,SAAjB;;AACA,sBAAInV,EAAE,CAAC0E,IAAH,CAAQsG,WAAR,CAAoB1E,GAApB,CAAwB,6BAAxB,CAAJ,EAA4D;AAC1DvE,oBAAAA,MAAM,CAAC0D,WAAP,CAAmB,UAAnB,EAA+B,UAAAC,CAAC,EAAI;AAAA,uCACdA,CAAC,CAACC,OAAF,EADc;AAAA;AAAA,0BAC7ByP,IAD6B;AAAA,0BACvBC,KADuB;;AAElCH,sBAAAA,QAAQ,CAAChH,OAAT,0BAAmCkH,IAAnC,cAA2CC,KAA3C;AACD,qBAHD;AAID;;AACGC,kBAAAA,KAljBR,GAkjBgB,IAljBhB;AAAA;AAAA;AAAA,yBAojBYvT,MAAM,CAACwF,MAAP,CAAc,KAAKR,SAAL,EAAd,CApjBZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsjBMuO,kBAAAA,KAAK,eAAL;;AAtjBN;AAwjBIJ,kBAAAA,QAAQ,CAACnL,IAAT;AACA,uBAAKrD,OAAL,CAAa,UAAb;;AAzjBJ,uBA0jBQ4O,KA1jBR;AAAA;AAAA;AAAA;;AAAA,wBA2jBYA,KA3jBZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA+jBE;;;AAGAxK,MAAAA,IAlkBF,kBAkkBS;AACL,YAAI,KAAKlD,cAAT,EAAyB;AACvB,eAAKA,cAAL,CAAoB2N,IAApB;;AACA;AACD;;AACD,YAAI5F,GAAG,GAAG,IAAI3P,EAAE,CAACO,EAAH,CAAMC,MAAN,CAAaC,MAAjB,CAAwB,aAAxB,CAAV;AACAkP,QAAAA,GAAG,CAAClM,GAAJ,CAAQ;AACNK,UAAAA,MAAM,EAAE,IAAI9D,EAAE,CAACO,EAAH,CAAMuD,MAAN,CAAa0R,IAAjB,CAAsB,CAAtB,CADF;AAEN7R,UAAAA,YAAY,EAAE,KAFR;AAGN8R,UAAAA,KAAK,EAAE,GAHD;AAIN5R,UAAAA,MAAM,EAAE;AAJF,SAAR;AAMA8L,QAAAA,GAAG,CAAClK,WAAJ,CAAgB,QAAhB,EAA0B,YAAM;AAC9BkK,UAAAA,GAAG,CAAC+F,MAAJ;AACD,SAFD;AAGA,aAAK9N,cAAL,GAAsB+H,GAAtB;;AACA,aAAKD,aAAL,CAAmBC,GAAnB;AACD,OAnlBH;;AAqlBE;;;AAGA5E,MAAAA,IAxlBF,kBAwlBS;AAAA;;AACL/K,QAAAA,EAAE,CAAC0B,KAAH,CAASyP,KAAT,CAAeC,IAAf,CAAoB,YAAM;AACxB,cAAIvD,QAAQ,GAAG,MAAI,CAACyB,mBAAL,KAA6B,gBAA5C;;AACA,UAAA,MAAI,CAAC1B,SAAL,CAAeC,QAAf,EAAyB,MAAI,CAAC9G,SAAL,EAAzB;AACD,SAHD,EAGG,IAHH,EAGS,CAHT;AAID,OA7lBH;;AA+lBE;;;;;;;AAOAiK,MAAAA,WAtmBF,uBAsmBc7K,UAtmBd,EAsmB0B3E,IAtmB1B,EAsmBgC;AAC5B,YAAMmU,QAAQ,GAAG,KAAKlP,eAAL,CAAqBN,UAArB,CAAjB;AACA,YAAMyP,KAAK,GAAG,KAAKjJ,WAAL,CAAiB,QAAjB,EAA2BkE,QAA3B,EAAd;;AACA,YAAIrP,IAAJ,EAAU;AACRmU,UAAAA,QAAQ,CAACjP,OAAT,CAAiBlF,IAAjB;AACD;;AACD,YAAIqU,YAAY,GAAGD,KAAK,CAACE,oBAAN,EAAnB;;AACA,YAAI;AACF,cAAIC,cAAc,GAAGJ,QAAQ,CAACK,SAAT,CAAmBH,YAAnB,CAArB;AACAD,UAAAA,KAAK,CAACK,qBAAN,CAA4BF,cAA5B;AACA,iBAAOA,cAAP;AACD,SAJD,CAIE,OAAOrQ,CAAP,EAAU;AACV,eAAK4P,KAAL,CAAW5P,CAAX;AACAmP,UAAAA,MAAM,CAACC,MAAP,CAAcQ,KAAd,CAAoB5P,CAAC,CAACgC,OAAtB;AACD;;AACD,eAAO,KAAP;AACD,OAtnBH;;AAwnBE;;;;;;AAMAwO,MAAAA,QA9nBF,oBA8nBW/P,UA9nBX,EA8nBuB3E,IA9nBvB,EA8nB6B;AAAA;;AACzB,YAAMmU,QAAQ,GAAG,KAAKlP,eAAL,CAAqBN,UAArB,CAAjB;;AACA,YAAI3E,IAAJ,EAAU;AACRmU,UAAAA,QAAQ,CAACjP,OAAT,CAAiBlF,IAAjB;AACD;;AACD,YAAI2U,gBAAgB,GAAG,KAAKxJ,WAAL,CAAiB,QAAjB,EAA2BkE,QAA3B,GAAsCuF,qBAAtC,EAAvB;;AACA,YAAI,CAACD,gBAAL,EAAuB;AACrB,cAAI,CAAC,KAAKpP,SAAL,EAAL,EAAuB;AACrB8N,YAAAA,MAAM,CAACC,MAAP,CAAcQ,KAAd,CAAoB,sBAApB;AACA,mBAAO,KAAP;AACD;;AACDa,UAAAA,gBAAgB,GAAG,KAAKnF,WAAL,CAAiB7K,UAAjB,CAAnB;AACD;;AACDnG,QAAAA,EAAE,CAAC0B,KAAH,CAASyP,KAAT,CAAeC,IAAf,CAAoB,YAAM;AACxB,cAAIvD,QAAQ,GAAG,MAAI,CAACyB,mBAAL,EAAf;;AACA,UAAA,MAAI,CAAC1B,SAAL,WAAkBC,QAAlB,cAA8B8H,QAAQ,CAACU,sBAAT,EAA9B,GAAmEF,gBAAnE;AACD,SAHD,EAGG,IAHH,EAGS,CAHT;AAIA,eAAO,IAAP;AACD,OAhpBH;;AAkpBE;;;;AAIMtN,MAAAA,IAtpBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAwpByB,KAAKgE,OAAL,EAxpBzB;;AAAA;AAwpBU7K,kBAAAA,MAxpBV;AAypBM,uBAAKwF,SAAL,CAAexF,MAAf;AAzpBN;AAAA;;AAAA;AAAA;AAAA;AA2pBM6S,kBAAAA,MAAM,CAACC,MAAP,CAAcQ,KAAd,CAAoB,aAAE5N,OAAtB;;AA3pBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA+pBE;;;;AAIAW,MAAAA,YAAY;AAAA;AAAA;AAAA,gCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACRiO,kBAAAA,QADQ,GACG;AACbC,oBAAAA,QAAQ,EAAE;AACR3D,sBAAAA,IAAI,EAAE,WADE;AAERpJ,sBAAAA,KAAK,EAAE,UAFC;AAGR6K,sBAAAA,OAAO,EAAPA;AAHQ,qBADG;AAMbmC,oBAAAA,QAAQ,EAAE;AACR5D,sBAAAA,IAAI,EAAE,UADE;AAER3G,sBAAAA,KAAK,EAAE,KAFC;AAGRzC,sBAAAA,KAAK,EAAE;AAHC;AANG,mBADH;AAAA;AAAA,yBAaOqL,MAAM,CAACC,MAAP,CAAclP,IAAd,CAAmB,kCAAnB,EAAuD0Q,QAAvD,EAAiEtB,OAAjE,EAbP;;AAAA;AAaRyB,kBAAAA,MAbQ;;AAAA,wBAcR,CAACA,MAAD,IAAW,CAACA,MAAM,CAACF,QAAP,CAAgB9M,IAAhB,EAdJ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAiBR8M,kBAAAA,QAjBQ,GAiBGE,MAAM,CAACF,QAjBV;AAkBZpT,kBAAAA,UAAU,CAACC,aAAX,CAAyB0G,QAAzB,CAAkC/G,WAAlC,GAAgDoS,OAAhD,CAAwD,SAAxD,EAAmEjH,OAAnE,CAA2E,gCAA3E;AAlBY;AAAA,yBAmBU,IAAIpB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrD,wBAAIqB,GAAG,0CAAmCkI,QAAnC,WAAP;AACA,wBAAIjI,GAAG,GAAG,IAAItO,EAAE,CAACuO,EAAH,CAAMC,OAAN,CAAcC,KAAlB,CAAwBJ,GAAxB,CAAV;AACAC,oBAAAA,GAAG,CAAC7I,WAAJ,CAAgB,SAAhB,EAA2B,UAAAC,CAAC,EAAI;AAC9BvC,sBAAAA,UAAU,CAACC,aAAX,CAAyB0G,QAAzB,CAAkC/G,WAAlC,GAAgDgH,IAAhD;AACA,0BAAI2E,QAAQ,GAAGJ,GAAG,CAACK,WAAJ,EAAf;;AACA,0BAAID,QAAQ,CAACK,IAAT,IAAiBL,QAAQ,CAAChH,OAA9B,EAAuC;AACrCsF,wBAAAA,MAAM,CAAC0B,QAAQ,CAAChH,OAAV,CAAN;AACD,uBAFD,MAEO,IAAIgH,QAAQ,CAACK,IAAb,EAAmB;AACxBhC,wBAAAA,OAAO,CAAC2B,QAAQ,CAACK,IAAV,CAAP;AACD;;AACD/B,sBAAAA,MAAM,CAAC,IAAIvF,KAAJ,CAAU,mBAAV,CAAD,CAAN;AACD,qBATD;AAUA6G,oBAAAA,GAAG,CAAC7I,WAAJ,CAAgB,aAAhB,EAA+BuH,MAA/B;AACAsB,oBAAAA,GAAG,CAACe,IAAJ;AACD,mBAfqB,CAnBV;;AAAA;AAmBRqH,kBAAAA,SAnBQ;AAoCRC,kBAAAA,MApCQ;;AAqCZ,sBAAI,CAACF,MAAM,CAACD,QAAZ,EAAsB;AACpBG,oBAAAA,MAAM,GAAG,MAAM,KAAKrH,mBAAL,EAAN,GAAmCqH,MAA5C;AACD;;AACGtC,kBAAAA,OAxCQ,GAwCEqC,SAAS,CACpBpC,MADW,CACJ,UAAAsC,KAAK;AAAA,2BAAIA,KAAK,CAACtN,WAAN,IAAqBrG,MAAM,CAACoQ,MAAP,CAAcuD,KAAK,CAACvJ,KAApB,EAA2BwJ,IAA3B,CAAgC,UAAA1J,IAAI;AAAA,6BAAIA,IAAI,CAACU,QAAL,CAAcP,QAAd,CAAuBqJ,MAAvB,CAAJ;AAAA,qBAApC,CAAzB;AAAA,mBADD,EAEXtE,GAFW,CAEP,UAAAuE,KAAK;AAAA,2BAAK;AACbpN,sBAAAA,KAAK,EAAEoN,KAAK,CAACtN,WADA;AAEb2C,sBAAAA,KAAK,EAAE2K,KAAK,CAAC/O;AAFA,qBAAL;AAAA,mBAFE,CAxCF;;AAAA,wBA8CRwM,OAAO,CAACP,MAAR,KAAiB,CA9CT;AAAA;AAAA;AAAA;;AA+CVe,kBAAAA,MAAM,CAACC,MAAP,CAAcQ,KAAd,CAAoB,+BAApB;AA/CU;;AAAA;AAkDZgB,kBAAAA,QAAQ,GAAG;AACTzO,oBAAAA,EAAE,EAAE;AACF+K,sBAAAA,IAAI,EAAE,WADJ;AAEFpJ,sBAAAA,KAAK,EAAE,QAFL;AAGF6K,sBAAAA,OAAO,EAAPA;AAHE;AADK,mBAAX;AAlDY;AAAA,yBAyDGQ,MAAM,CAACC,MAAP,CAAclP,IAAd,CAAmB,2CAAnB,EAAgE0Q,QAAhE,EAA0EtB,OAA1E,EAzDH;;AAAA;AAyDZyB,kBAAAA,MAzDY;;AAAA,wBA2DR,CAACA,MAAD,IAAW,CAACA,MAAM,CAAC5O,EA3DX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,iCA8DZ,IA9DY;AAAA;AAAA,yBA8DS,KAAKZ,WAAL,CAAiBwP,MAAM,CAAC5O,EAAxB,CA9DT;;AAAA;AAAA;;AAAA,+BA8DPL,SA9DO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,SAnqBd;;AAouBE;;;;AAIMe,MAAAA,YAxuBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAyuBuBsM,MAAM,CAACC,MAAP,CAAcgC,MAAd,CAAqB,2CAArB,CAzuBvB;;AAAA;AAyuBQL,kBAAAA,MAzuBR;;AAAA,wBA0uBQ,CAACA,MAAD,IAAW,CAACA,MAAM,CAAC5O,EA1uB3B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,iCA6uBI,IA7uBJ;AAAA;AAAA,yBA6uByB,KAAKZ,WAAL,CAAiBwP,MAAM,CAAC5O,EAAxB,CA7uBzB;;AAAA;AAAA;;AAAA,+BA6uBSL,SA7uBT;;AA8uBI,uBAAKuP,SAAL,CAAeN,MAAM,CAAC5O,EAAtB;;AA9uBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,KA5PuD;;AA8+BvD;;;AAGAmP,IAAAA,KAAK,EAAE,iBAAW;AAIhBpH,MAAAA,OAAO,CAACE,OAAR,CAAgBmH,SAAhB,CACErH,OAAO,CAACE,OAAR,CAAgBoH,yBADlB,EAEElX,EAAE,CAAC6C,IAAH,CAAQmN,eAAR,CAAwBjN,WAAxB,GAAsCkN,KAAtC,CAA4C,6BAA5C,CAFF,EAJgB,CAOhB;;AACAjQ,MAAAA,EAAE,CAACiL,GAAH,CAAOkM,SAAP,CAAiBC,OAAjB;AAAA;AAAA;AAAA;AAAA,8BAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBlC,gBAAAA,QADmB,GACR/R,UAAU,CAACC,aAAX,CAAyB0G,QAAzB,CAAkC/G,WAAlC,EADQ;AAEvBmS,gBAAAA,QAAQ,CAACC,OAAT,CAAiB,SAAjB;AACAD,gBAAAA,QAAQ,CAAChH,OAAT,CAAiB,6CAAjB;AACImJ,gBAAAA,YAJmB,GAIJnC,QAAQ,CAACoC,gBAAT,EAJI,EAKvB;;AALuB,qBAMnBtX,EAAE,CAACI,KAAH,CAASmX,SAAT,CAAmB,4CAAnB,CANmB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAOf,IAAIzK,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC3B,sBAAMyK,QAAQ,GAAGxX,EAAE,CAACI,KAAH,CAASyR,SAAT,CAAmB,4CAAnB,EAAiE9O,WAAjE,EAAjB;AACAyU,kBAAAA,QAAQ,CAACC,eAAT,CAAyB,MAAzB,EAAiC1K,OAAjC;AACD,iBAHK,CAPe;;AAAA;AAavB;AACA,oBAAImI,QAAQ,CAACoC,gBAAT,OAAgCD,YAApC,EAAkD;AAChDnC,kBAAAA,QAAQ,CAACnL,IAAT;AACD,iBAhBsB,CAiBvB;;;AACI2N,gBAAAA,UAlBmB,GAkBN,IAAIvU,UAAU,CAACC,aAAX,CAAyBC,YAA7B,EAlBM;AAmBvBrD,gBAAAA,EAAE,CAAC0E,IAAH,CAAQiT,IAAR,CAAaC,cAAb,GAA8BC,OAA9B,GAAwCrU,GAAxC,CAA4CkU,UAA5C,EAAwD;AAACI,kBAAAA,GAAG,EAAC,CAAL;AAAQC,kBAAAA,KAAK,EAAC;AAAd,iBAAxD;AAEEL,gBAAAA,UAAU,CAACM,IAAX;;AArBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzB;AAwBD;AAjhCsD,GAAzD,C;AAtBA7U,EAAAA,UAAU,CAACC,aAAX,CAAyBC,YAAzB,CAAsClD,aAAtC,GAAsDA,aAAtD",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n\n************************************************************************ */\n\n/**\n * The UI Controller for the recorder\n * @asset(cboulanger/eventrecorder/*)\n * @require(cboulanger.eventrecorder.player.Testcafe)\n * @ignore(ace)\n */\nqx.Class.define(\"cboulanger.eventrecorder.UiController\", {\n  extend: qx.ui.window.Window,\n  statics: {\n    CONFIG_KEY : {\n      SCRIPT:       \"eventrecorder.script\",\n      PLAYER_TYPE:  \"eventrecorder.player_type\",\n      PLAYER_MODE:  \"eventrecorder.player_mode\",\n      GIST_ID:      \"eventrecorder.gist_id\",\n      AUTOPLAY:     \"eventrecorder.autoplay\",\n      SHOW_PROGRESS:\"eventrecorder.show_progress\",\n      SCRIPTABLE:   \"eventrecorder.scriptable\",\n      RELOAD_BEFORE_REPLAY: \"eventrecorder.reload_before_replay\",\n      SCRIPT_URL:   \"eventrecorder.script_url\"\n    },\n    FILE_INPUT_ID : \"eventrecorder-fileupload\",\n    aliases: {\n      \"eventrecorder.icon.record\":  \"cboulanger/eventrecorder/media-record.png\",\n      \"eventrecorder.icon.start\":   \"cboulanger/eventrecorder/media-playback-start.png\",\n      \"eventrecorder.icon.pause\":   \"cboulanger/eventrecorder/media-playback-pause.png\",\n      \"eventrecorder.icon.stop\":    \"cboulanger/eventrecorder/media-playback-stop.png\",\n      \"eventrecorder.icon.edit\":    \"cboulanger/eventrecorder/document-properties.png\",\n      \"eventrecorder.icon.save\":    \"cboulanger/eventrecorder/document-save.png\",\n      \"eventrecorder.icon.load\":    \"cboulanger/eventrecorder/document-open.png\",\n      \"eventrecorder.icon.export\":  \"cboulanger/eventrecorder/emblem-symbolic-link.png\"\n    }\n  },\n\n  properties: {\n    /**\n     * Current mode\n     */\n    mode: {\n      check: [\"player\", \"recorder\"],\n      event: \"changeMode\",\n      init: \"recorder\",\n      apply: \"_applyMode\"\n    },\n\n    /**\n     * The recorder instance\n     */\n    recorder: {\n      check: \"cboulanger.eventrecorder.Recorder\",\n      event: \"changeRecorder\",\n      nullable: true\n    },\n\n    /**\n     * The player instance\n     */\n    player: {\n      check: \"cboulanger.eventrecorder.IPlayer\",\n      event: \"changePlayer\",\n      nullable: true\n    },\n\n    /**\n     * The recorded script\n     */\n    script: {\n      check: \"String\",\n      nullable: true,\n      deferredInit: true,\n      event: \"changeScript\",\n      apply: \"_applyScript\"\n    },\n\n    /**\n     * Whether the stored script should start playing after the\n     * application loads\n     */\n    autoplay: {\n      check: \"Boolean\",\n      nullable: false,\n      deferredInit: true,\n      event: \"changeAutoplay\",\n      apply: \"_applyAutoplay\"\n    },\n\n    /**\n     * Whether the application is reloaded before the script is replayed\n     */\n    reloadBeforeReplay: {\n      check: \"Boolean\",\n      nullable: false,\n      deferredInit: true,\n      event: \"changeReloadBeforeReplay\",\n      apply: \"_applyReloadBeforeReplay\"\n    },\n\n    /**\n     * The id of a gist to replay a script from, if any\n     */\n    gistId: {\n      check: \"String\",\n      nullable: true,\n      deferredInit: true,\n      event: \"changeGistId\",\n      apply: \"_applyGistId\"\n    },\n\n    /**\n     * Whether the event recorder is scriptable\n     * (only useful for demos of the eventrecorder itself)\n     */\n    scriptable: {\n      check: \"Boolean\",\n      nullable: false,\n      deferredInit: true,\n      event: \"changeScriptable\"\n    }\n  },\n\n  /**\n   * Constructor\n   * @param caption {String} The caption of the window. Will be used to create\n   * an object id.\n   * @ignore(env)\n   * @ignore(storage)\n   * @ignore(uri_params)\n   * @ignore(caption)\n   */\n  construct: function(caption=\"Event Recorder\") {\n    this.base(arguments);\n\n    let {env, storage, uri_params} = this._getPersistenceProviders();\n\n    // workaround until icon theme can be mixed into application theme\n    const aliasMgr = qx.util.AliasManager.getInstance();\n    const aliases = aliasMgr.getAliases();\n    for (let [alias, base] of Object.entries(cboulanger.eventrecorder.UiController.aliases)) {\n      if (!aliases[alias]) {\n        aliasMgr.add(alias, base);\n      }\n    }\n    //\n    this.set({\n      caption,\n      modal: false,\n      showMinimize: false,\n      showMaximize: false,\n      height: 90,\n      layout: new qx.ui.layout.HBox(5),\n      allowGrowX: false,\n      allowGrowY: false\n    });\n\n    this._iniPropertiesFromEnvironment();\n    this.__players = {};\n\n    const recorder = new cboulanger.eventrecorder.Recorder();\n    this.setRecorder(recorder);\n\n    // assign id to this widget from caption\n    const objectId = caption.replace(/ /g, \"\").toLocaleLowerCase();\n    this.setQxObjectId(objectId);\n    qx.core.Id.getInstance().register(this, objectId);\n\n    // do not record events for this widget unless explicitly requested\n    if (!this.getScriptable()) {\n      recorder.excludeIds(objectId);\n    }\n\n    // caption\n    this.bind(\"recorder.running\", this, \"caption\", {\n      converter: v => v ? \"Recording ...\" : caption\n    });\n    this.bind(\"player.running\", this, \"caption\", {\n      converter: v => v ? \"Replaying ...\" : caption\n    });\n    // this creates the buttons in this order and adds them to the window\n    this._createControl(\"load\");\n    this._createControl(\"replay\");\n    this._createControl(\"record\");\n    let stopButton = this._createControl(\"stop\");\n    this._createControl(\"edit\");\n    this._createControl(\"save\");\n    // stop button special handling\n\n    const stopButtonState = () => {\n      stopButton.setEnabled(\n        recorder.isRunning() || (Boolean(this.getPlayer()) && this.getPlayer().isRunning())\n      );\n    };\n    recorder.addListener(\"changeRunning\", stopButtonState);\n    this.addListener(\"changePlayer\", e => {\n      if (e.getData()) {\n        this.getPlayer().addListener(\"changeRunning\", stopButtonState);\n      }\n    });\n    // form for file uploads\n    var form = document.createElement(\"form\");\n    form.setAttribute(\"visibility\", \"hidden\");\n    document.body.appendChild(form);\n    let input = document.createElement(\"input\");\n    input.setAttribute(\"id\", cboulanger.eventrecorder.UiController.FILE_INPUT_ID);\n    input.setAttribute(\"type\", \"file\");\n    input.setAttribute(\"name\", \"file\");\n    input.setAttribute(\"visibility\", \"hidden\");\n    form.appendChild(input);\n\n    // Player configuration\n    let playerType = uri_params.queryKey.eventrecorder_type ||\n      env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_TYPE) ||\n      \"qooxdoo\";\n    let mode = uri_params.queryKey.eventrecorder_player_mode ||\n      storage.getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_MODE) ||\n      env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_MODE) ||\n      \"presentation\";\n    let player = this.getPlayerByType(playerType);\n    player.setMode(mode);\n    player.addListener(\"changeMode\", e => {\n      storage.setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.PLAYER_MODE, e.getData());\n    });\n    this.setPlayer(player);\n\n    // Autoplay\n    let gistId = this.getGistId();\n    let autoplay = this.getAutoplay();\n    let script = this.getScript();\n    if (gistId && !(script && this._scriptUrlMatches())) {\n      this._getRawGist(gistId)\n        .then(gist => {\n          // if the eventrecorder itself is scriptable, run the gist in a separate player without GUI\n          if (this.getScriptable()) {\n            let gistplayer = new cboulanger.eventrecorder.player.Qooxdoo();\n            gistplayer.setMode(mode);\n            if (autoplay) {\n              this.setAutoplay(false);\n              gistplayer.replay(gist);\n            }\n          } else {\n            this.setScript(gist);\n            if (autoplay) {\n              this.setAutoplay(false);\n              this.replay();\n            }\n          }\n        })\n        .catch(e => {\n          throw new Error(`Gist ${gistId} cannot be loaded: ${e.message}.`);\n        });\n    } else if (script && autoplay) {\n      this.setAutoplay(false);\n      this.replay();\n    }\n  },\n\n  /**\n   * The methods and simple properties of this class\n   */\n  members:\n  {\n    /**\n     * @var {qx.ui.window.Window}\n     */\n    __editorWindow : null,\n    __players : null,\n\n\n    /**\n     * Internal method to create child controls\n     * @param id\n     * @return {qx.ui.core.Widget}\n     * @private\n     */\n    _createControl(id) {\n      let control;\n      let recorder = this.getRecorder();\n\n      switch (id) {\n        /**\n         * Load Button\n         */\n        case \"load\": {\n          let loadMenu = new qx.ui.menu.Menu();\n          let loadUserGistButton = new qx.ui.menu.Button(\"Load user gist\");\n          loadUserGistButton.addListener(\"execute\", this.loadUserGist, this);\n          loadUserGistButton.setQxObjectId(\"fromUserGist\");\n          loadMenu.add(loadUserGistButton);\n          let loadGistByIdButton = new qx.ui.menu.Button(\"Load gist by id\");\n          loadGistByIdButton.addListener(\"execute\", this.loadGistById, this);\n          loadGistByIdButton.setQxObjectId(\"fromGistById\");\n          loadMenu.add(loadGistByIdButton);\n          control = new qx.ui.form.SplitButton();\n          control.set({\n            enabled: false,\n            icon:\"eventrecorder.icon.load\",\n            toolTipText: \"Load script\",\n            menu: loadMenu\n          });\n          control.addOwnedQxObject(loadUserGistButton);\n          control.addOwnedQxObject(loadGistByIdButton);\n          control.addListener(\"execute\", this.load, this);\n          // enable load button only if player can replay scripts in the browser\n          this.bind(\"recorder.running\", control, \"enabled\", {\n            converter: v => !v\n          });\n          break;\n        }\n        /**\n         * Replay button\n         */\n        case \"replay\": {\n          control = new cboulanger.eventrecorder.SplitToggleButton();\n          let replayMenu = new qx.ui.menu.Menu();\n          control.addOwnedQxObject(replayMenu, \"menu\");\n          let macroButton = new qx.ui.menu.Button(\"Macros\");\n          replayMenu.add(macroButton);\n          let macroMenu = new qx.ui.menu.Menu();\n          macroButton.setMenu(macroMenu);\n          this.addListener(\"changePlayer\", () => {\n            let player = this.getPlayer();\n            if (!player) {\n              return;\n            }\n            const updateMenu = async () => {\n              macroMenu.removeAll();\n              for (let name of player.getMacroNames().toArray()) {\n                let description = player.getMacroDescription(name);\n                let label = description.trim() ? (name + \": \" + description) : name;\n                let menuButton = new qx.ui.menu.Button(label);\n                menuButton.addListener(\"execute\", async () => {\n                  let macro = player.getMacroDefinition(name).join(\"\\n\");\n                  await player.replay(macro);\n                  cboulanger.eventrecorder.InfoPane.getInstance().hide();\n                });\n                macroMenu.add(menuButton);\n              }\n            };\n            player.addListener(\"changeMacros\", () =>{\n              updateMenu();\n              player.getMacros().getNames().addListener(\"change\", updateMenu);\n            });\n          });\n\n          replayMenu.addSeparator();\n          replayMenu.add(new qx.ui.menu.Button(\"Options:\"));\n          let optionReload = new qx.ui.menu.CheckBox(\"Reload page before replay\");\n          this.bind(\"reloadBeforeReplay\", optionReload, \"value\");\n          optionReload.bind(\"value\", this, \"reloadBeforeReplay\");\n          replayMenu.add(optionReload);\n          control.addListener(\"execute\", this._startReplay, this);\n          control.set({\n            enabled: false,\n            icon:\"eventrecorder.icon.start\",\n            toolTipText: \"Replay script\",\n            menu: replayMenu\n          });\n          // show replay button only if player is attached and if it can replay a script in the browser\n          this.bind(\"player\", control, \"visibility\", {\n            converter: player => Boolean(player) && player.getCanReplayInBrowser() ? \"visible\" : \"excluded\"\n          });\n          this.bind(\"recorder.running\", control, \"enabled\", {\n            converter: v => !v\n          });\n          this.bind(\"player.running\", control, \"value\");\n          break;\n        }\n        /**\n         * Record Button\n         */\n        case \"record\": {\n          let recordMenu = new qx.ui.menu.Menu();\n          recordMenu.add(new qx.ui.menu.Button(\"Options:\"));\n          let debugEvents = new qx.ui.menu.CheckBox(\"Log event data\");\n          debugEvents.bind(\"value\", this, \"recorder.logEvents\");\n          recordMenu.add(debugEvents);\n          control = new cboulanger.eventrecorder.SplitToggleButton();\n          control.setIcon(\"eventrecorder.icon.record\");\n          control.setMenu(recordMenu);\n          control.addListener(\"changeValue\", this._toggleRecord, this);\n          recorder.bind(\"running\", control, \"value\");\n          recorder.bind(\"running\", control, \"enabled\", {\n            converter: v => !v\n          });\n          this.bind(\"mode\", control, \"enabled\", {\n            converter: v => v === \"recorder\"\n          });\n          break;\n        }\n        /**\n         * Stop Button\n         */\n        case \"stop\": {\n          control = new qx.ui.form.Button();\n          control.set({\n            enabled: false,\n            icon: \"eventrecorder.icon.stop\",\n            toolTipText: \"Stop recording\"\n          });\n          control.addListener(\"execute\", this.stop, this);\n          break;\n        }\n        /**\n         * Edit Button\n         */\n        case \"edit\": {\n          control = new qx.ui.form.Button();\n          control.set({\n            enabled: true,\n            icon:\"eventrecorder.icon.edit\",\n            toolTipText: \"Edit script\"\n          });\n          control.addListener(\"execute\", this.edit, this);\n          this.bind(\"recorder.running\", control, \"enabled\", {\n            converter: v => !v\n          });\n          // this.bind(\"script\", editButton, \"enabled\", {\n          //   converter: v => Boolean(v)\n          // });\n          break;\n        }\n        /**\n         * Save Button\n         */\n        case \"save\": {\n          control = new qx.ui.form.Button();\n          control.set({\n            enabled: false,\n            icon:\"eventrecorder.icon.save\",\n            toolTipText: \"Save script\"\n          });\n          control.addListener(\"execute\", this.save, this);\n          this.bind(\"recorder.running\", control, \"enabled\", {\n            converter: v => !v\n          });\n          break;\n        }\n        default:\n          throw new Error(`Control '${id} does not exist.'`);\n      }\n      // add to widget and assign object id\n      this.add(control);\n      this.addOwnedQxObject(control, id);\n      return control;\n    },\n\n    /**\n     * Returns a map with object providing persistence\n     * @return {{env: qx.core.Environment, storage: qx.bom.storage.Web, uri_params: {}}}\n     * @private\n     */\n    _getPersistenceProviders() {\n      return {\n        env: qx.core.Environment,\n        storage: qx.bom.storage.Web.getSession(),\n        uri_params: qx.util.Uri.parseUri(window.location.href)\n      };\n    },\n\n    /**\n     * Deferred initialization of properties that get their values from the environment\n     * @private\n     * @ignore(env)\n     * @ignore(storage)\n     * @ignore(uri_params)\n     */\n    _iniPropertiesFromEnvironment() {\n      let {env, storage, uri_params} = this._getPersistenceProviders();\n      let script = storage.getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.SCRIPT) || \"\";\n      this.initScript(script);\n      let autoplay = uri_params.queryKey.eventrecorder_autoplay ||\n        storage.getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.AUTOPLAY) ||\n        env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.AUTOPLAY) ||\n        false;\n      this.initAutoplay(autoplay);\n      let reloadBeforeReplay = storage.getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.RELOAD_BEFORE_REPLAY);\n      this.initReloadBeforeReplay(reloadBeforeReplay === null ? false : reloadBeforeReplay);\n      let gistId = uri_params.queryKey.eventrecorder_gist_id || env.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.GIST_ID) || null;\n      this.initGistId(gistId);\n      let scriptable = Boolean(uri_params.queryKey.eventrecorder_scriptable) || qx.core.Environment.get(cboulanger.eventrecorder.UiController.CONFIG_KEY.SCRIPTABLE) || false;\n      this.initScriptable(scriptable);\n      //console.warn({script, autoplay, gistId, reloadBeforeReplay, scriptable});\n    },\n\n    _applyMode(value, old) {\n      if (value === \"player\" && !this.getPlayer()) {\n        throw new Error(\"Cannot switch to player mode: no player has been set\");\n      }\n    },\n\n    /**\n     * When setting the script property, store it in the browser\n     * @param value\n     * @param old\n     * @private\n     */\n    _applyScript(value, old) {\n      qx.bom.storage.Web.getSession().setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.SCRIPT, value);\n      if (this.getRecorder()) {\n        this.getRecorder().setScript(value);\n      }\n    },\n\n    _saveScriptUrl() {\n      qx.bom.storage.Web.getSession().setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.SCRIPT_URL, document.location.href);\n    },\n\n    _scriptUrlMatches() {\n      return qx.bom.storage.Web.getSession().getItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.SCRIPT_URL) === document.location.href;\n    },\n\n    _applyGistId(value, old) {\n      // todo: add to URI\n    },\n\n    /**\n     * Apply the \"autoplay\" property and store it in local storage\n     * @param value\n     * @param old\n     * @private\n     */\n    _applyAutoplay(value, old) {\n      qx.bom.storage.Web.getSession().setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.AUTOPLAY, value);\n    },\n\n    /**\n     * Apply the \"reloadBeforeReplay\" property and storeit in local storage\n     * @param value\n     * @param old\n     * @private\n     */\n    _applyReloadBeforeReplay(value, old) {\n      qx.bom.storage.Web.getSession().setItem(cboulanger.eventrecorder.UiController.CONFIG_KEY.RELOAD_BEFORE_REPLAY, value);\n    },\n\n    /**\n     * Event handler for record toggle button\n     * @param e\n     */\n    _toggleRecord(e) {\n      if (e.getData()) {\n        this.record();\n      }\n    },\n\n    /**\n     * Event handler for replay button\n     * @private\n     */\n    _startReplay() {\n      // start\n      if (this.getScript() || this.getGistId()) {\n        if (this.getReloadBeforeReplay()) {\n          // reload\n          this.setAutoplay(true);\n          window.location.reload();\n        } else if (this.getScript()) {\n          this.replay();\n        } else {\n          this.getQxObject(\"replay\").setValue(false);\n        }\n      }\n    },\n\n    /**\n     * Uploads content to the browser. Returns the content of the file.\n     * @return {Promise<String>}\n     * @private\n     */\n    async _upload() {\n      return new Promise((resolve, reject) => {\n        let input = document.getElementById(cboulanger.eventrecorder.UiController.FILE_INPUT_ID);\n        input.addEventListener(\"change\", e => {\n          let file = e.target.files[0];\n          if (!file.name.endsWith(\".eventrecorder\")) {\n            reject(new Error(\"Not an eventrecorder script\"));\n          }\n          let reader = new FileReader();\n          reader.addEventListener(\"loadend\", () => {\n            resolve(reader.result);\n          });\n          reader.addEventListener(\"error\", reject);\n          reader.readAsText(file);\n        });\n        input.click();\n      });\n    },\n\n    /**\n     * Donwload content\n     * @param filename\n     * @param text\n     * @private\n     */\n    _download(filename, text) {\n      var element = document.createElement(\"a\");\n      element.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text));\n      element.setAttribute(\"download\", filename);\n      element.style.display = \"none\";\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    },\n\n    /**\n     * Get the content of a gist by its id\n     * @param gist_id {String}\n     * @return {Promise<*>}\n     * @private\n     */\n    _getRawGist: async function (gist_id) {\n      return new Promise((resolve, reject) => {\n        let url = `https://api.github.com/gists/${gist_id}`;\n        let req = new qx.io.request.Jsonp(url);\n        req.addListener(\"success\", e => {\n          let response = req.getResponse();\n          if (!qx.lang.Type.isObject(response.data.files)) {\n            reject(new Error(\"Unexpected response: \" + JSON.stringify(response)));\n          }\n          let filenames = Object.getOwnPropertyNames(response.data.files);\n          let file = response.data.files[filenames[0]];\n          if (!file.filename.endsWith(\".eventrecorder\")) {\n            reject(new Error(\"Gist is not an eventrecorder script\"));\n          }\n          let script = file.content;\n          resolve(script);\n        });\n        req.addListener(\"statusError\", e => reject(new Error(e.getData())));\n        req.send();\n      });\n    },\n\n    /**\n     * Returns the name of the application by using the parent directory of the\n     * index.html script\n     * @return {string}\n     * @private\n     */\n    _getApplicationName() {\n      return window.document.location.pathname.split(\"/\").slice(-2, -1).join(\"\");\n    },\n\n    /**\n     * Sets up an editor in the given window\n     * @param win {qx.ui.window.Window}\n     * @private\n     */\n    __setupEditor(win) {\n      qookery.contexts.Qookery.loadResource(\n        qx.util.ResourceManager.getInstance().toUri(\"cboulanger/eventrecorder/forms/editor.xml\"), this,\n        xmlSource => {\n          let xmlDocument = qx.xml.Document.fromString(xmlSource);\n          let parser = qookery.Qookery.createFormParser();\n          let formComponent = parser.parseXmlDocument(xmlDocument);\n          formComponent.setQxObjectId(\"editor\");\n          this.addOwnedQxObject(formComponent);\n          let editorWidget = formComponent.getMainWidget();\n          win.add(editorWidget);\n          win.setQxObjectId(\"window\");\n          formComponent.addOwnedQxObject(win);\n          editorWidget.addListener(\"appear\", () => formComponent.getModel().setLeftEditorContent(this.getScript()));\n          this.bind(\"script\", formComponent.getModel(), \"leftEditorContent\");\n          let formModel = formComponent.getModel();\n          formModel.bind(\"leftEditorContent\", this, \"script\");\n          formModel.addListener(\"changeTargetScriptType\", e => this.translateTo(formModel.getTargetScriptType(), formModel.getTargetMode()));\n          formModel.addListener(\"changeTargetMode\", e => this.translateTo(formModel.getTargetScriptType(), formModel.getTargetMode()));\n          qx.event.Timer.once(() => this.__setupAutocomplete(), this, 1000);\n          parser.dispose();\n          this.edit();\n        });\n    },\n\n    /**\n     * Configures the autocomplete feature in the editor(s)\n     * @private\n     */\n    __setupAutocomplete () {\n      const langTools = ace.require(\"ace/ext/language_tools\");\n      let tokens = [];\n      let iface = qx.Interface.getByName(\"cboulanger.eventrecorder.IPlayer\").$$members;\n      for (let key of Object.getOwnPropertyNames(iface)) {\n        if (key.startsWith(\"cmd_\") && typeof iface[key] == \"function\") {\n          let code = iface[key].toString();\n          let params = code.slice(code.indexOf(\"(\") + 1, code.indexOf(\")\")).split(/,/).map(p => p.trim());\n          let caption = key.substr(4).replace(/_/g, \"-\");\n          let snippet = caption + \" \" + params.map((p, i) => `\\${${i+1}:${p}}`).join(\" \") + \"\\$0\";\n          let meta = params.join(\" \");\n          let value = null;\n          tokens.push({caption, type: \"command\", snippet, meta, value});\n        }\n      }\n      let ids = [];\n      let traverseObjectTree = function(obj) {\n        if (typeof obj.getQxObjectId !== \"function\") {\n          return;\n        }\n        let id = obj.getQxObjectId();\n        if (id) {\n          ids.push(qx.core.Id.getAbsoluteIdOf(obj));\n        }\n        for (let owned of obj.getOwnedQxObjects()) {\n          traverseObjectTree(owned);\n        }\n      };\n      let registeredObjects = Object.values(qx.core.Id.getInstance().__registeredObjects); //FIXME\n      for (let obj of registeredObjects) {\n        traverseObjectTree(obj);\n      }\n      for (let id of ids) {\n        tokens.push({caption: id, type: \"id\", value: id});\n      }\n      const player = this.getPlayer();\n      const completer = {\n        getCompletions: function (editor, session, pos, prefix, callback) {\n          if (prefix.length === 0) {\n            callback(null, []);\n            return;\n          }\n          let line = editor.session.getLine(pos.row).substr(0, pos.column);\n          let numberOfTokens = player._tokenize(line).length;\n          let options = tokens\n          // filter on positional argument\n            .filter(token => (token.type === \"command\" && numberOfTokens === 1) || (token.type === \"id\" && numberOfTokens === 2))\n            // filter on word match\n            .filter(token => token.caption.toLocaleLowerCase().substr(0, prefix.length) === prefix.toLocaleLowerCase())\n            // create popup data\n            .map(token => {\n              token.score = 100 - (token.caption.length - prefix.length);\n              return token;\n            });\n          callback(null, options);\n        }\n      };\n      langTools.addCompleter(completer);\n    },\n\n    /*\n     ===========================================================================\n       PUBLIC API\n     ===========================================================================\n     */\n\n    /**\n     * Returns a player instance. Caches the result\n     * @param type\n     * @private\n     * @return {cboulanger.eventrecorder.IPlayer}\n     */\n    getPlayerByType(type) {\n      if (!type) {\n        throw new Error(\"No player type given!\");\n      }\n      if (this.__players[type]) {\n        return this.__players[type];\n      }\n      let clazz = cboulanger.eventrecorder.player[qx.lang.String.firstUp(type)];\n      if (!clazz) {\n        throw new Error(`A player of type '${type}' does not exist.`);\n      }\n      const player = new clazz();\n      this.__players[type] = player;\n      return player;\n    },\n\n    /**\n     * Starts recording\n     */\n    async record() {\n      let recorder = this.getRecorder();\n      if (this.getScript().trim()!==\"\" && !this.getScriptable()) {\n        let mode = await dialog.Dialog.select(\n          \"Do you want to overwrite your script or append new events?\",\n          [\n            {label: \"Append\", value: \"append\"},\n            {label: \"Overwrite\", value: \"overwrite\"}\n          ]\n        ).promise();\n        if (!mode) {\n          this.getQxObject(\"record\").setValue(false);\n          return;\n        }\n        recorder.setMode(mode);\n      }\n      recorder.start();\n    },\n\n    /**\n     * Stops recording/replaying\n     */\n    stop() {\n      if (this.getRecorder().isRunning()) {\n        this.getRecorder().stop();\n        let script = this.getRecorder().getScript();\n        this._saveScriptUrl();\n        this.setScript(script);\n      }\n      if (this.getPlayer() && this.getPlayer().isRunning()) {\n        this.getPlayer().stop();\n      }\n    },\n\n    /**\n     * Replays the current script\n     * @return {Promise<void>}\n     */\n    async replay() {\n      if (!this.getScript()) {\n        throw new Error(\"No script to replay\");\n      }\n      let player = this.getPlayer();\n      if (!player) {\n        throw new Error(\"No player has been set\");\n      }\n      this.setMode(\"player\");\n      let infoPane = cboulanger.eventrecorder.InfoPane.getInstance();\n      infoPane.useIcon(\"waiting\");\n      if (qx.core.Environment.get(\"eventrecorder.show_progress\")) {\n        player.addListener(\"progress\", e => {\n          let [step, steps] = e.getData();\n          infoPane.display(`Replaying ... (${step}/${steps})`);\n        });\n      }\n      let error = null;\n      try {\n        await player.replay(this.getScript());\n      } catch (e) {\n        error = e;\n      }\n      infoPane.hide();\n      this.setMode(\"recorder\");\n      if (error) {\n        throw error;\n      }\n    },\n\n    /**\n     * Edits the current script\n     */\n    edit() {\n      if (this.__editorWindow) {\n        this.__editorWindow.open();\n        return;\n      }\n      let win = new qx.ui.window.Window(\"Edit script\");\n      win.set({\n        layout: new qx.ui.layout.VBox(5),\n        showMinimize: false,\n        width: 800,\n        height: 600\n      });\n      win.addListener(\"appear\", () => {\n        win.center();\n      });\n      this.__editorWindow = win;\n      this.__setupEditor(win);\n    },\n\n    /**\n     * Save the current script to the local machine\n     */\n    save() {\n      qx.event.Timer.once(() => {\n        let filename = this._getApplicationName() + \".eventrecorder\";\n        this._download(filename, this.getScript());\n      }, null, 0);\n    },\n\n    /**\n     * Translates the text in the left editor into the language produced by the\n     * given player type. Alerts any errors that occur.\n     * @param playerType {String}\n     * @param mode {String}\n     * @return {String|false}\n     */\n    translateTo(playerType, mode) {\n      const exporter = this.getPlayerByType(playerType);\n      const model = this.getQxObject(\"editor\").getModel();\n      if (mode) {\n        exporter.setMode(mode);\n      }\n      let editedScript = model.getLeftEditorContent();\n      try {\n        let translatedText = exporter.translate(editedScript);\n        model.setRightEditorContent(translatedText);\n        return translatedText;\n      } catch (e) {\n        this.error(e);\n        dialog.Dialog.error(e.message);\n      }\n      return false;\n    },\n\n    /**\n     * Export the script in the given format\n     * @param playerType {String}\n     * @param mode {String}\n     * @return {Boolean}\n     */\n    exportTo(playerType, mode) {\n      const exporter = this.getPlayerByType(playerType);\n      if (mode) {\n        exporter.setMode(mode);\n      }\n      let translatedScript = this.getQxObject(\"editor\").getModel().getRightEditorContent();\n      if (!translatedScript) {\n        if (!this.getScript()) {\n          dialog.Dialog.error(\"No script to export!\");\n          return false;\n        }\n        translatedScript = this.translateTo(playerType);\n      }\n      qx.event.Timer.once(() => {\n        let filename = this._getApplicationName();\n        this._download(`${filename}.${exporter.getExportFileExtension()}`, translatedScript);\n      }, null, 0);\n      return true;\n    },\n\n    /**\n     * Load a script from the local machine\n     * @return {Promise<void>}\n     */\n    async load() {\n      try {\n        let script = await this._upload();\n        this.setScript(script);\n      } catch (e) {\n        dialog.Dialog.error(e.message);\n      }\n    },\n\n    /**\n     * Loads a gist selected from a github user's gists\n     * @return {Promise<void>}\n     */\n    loadUserGist: async function () {\n      let formData = {\n        username: {\n          type: \"Textfield\",\n          label: \"Username\",\n          options\n        },\n        show_all: {\n          type: \"Checkbox\",\n          value: false,\n          label: \"Show all scripts (even if URL does not match)\"\n        }\n      };\n      let answer = await dialog.Dialog.form(\"Please enter the GitHub username\", formData).promise();\n      if (!answer || !answer.username.trim()) {\n        return;\n      }\n      let username = answer.username;\n      cboulanger.eventrecorder.InfoPane.getInstance().useIcon(\"waiting\").display(\"Retrieving data from GitHub...\");\n      let gist_data = await new Promise((resolve, reject) => {\n        let url = `https://api.github.com/users/${username}/gists`;\n        let req = new qx.io.request.Jsonp(url);\n        req.addListener(\"success\", e => {\n          cboulanger.eventrecorder.InfoPane.getInstance().hide();\n          let response = req.getResponse();\n          if (response.data && response.message) {\n            reject(response.message);\n          } else if (response.data) {\n            resolve(response.data);\n          }\n          reject(new Error(\"Invalid response.\"));\n        });\n        req.addListener(\"statusError\", reject);\n        req.send();\n      });\n\n      let suffix = `.eventrecorder`;\n      if (!answer.show_all) {\n        suffix = \".\" + this._getApplicationName() + suffix;\n      }\n      let options = gist_data\n        .filter(entry => entry.description && Object.values(entry.files).some(file => file.filename.endsWith(suffix)))\n        .map(entry => ({\n          label: entry.description,\n          value: entry.id\n        }));\n      if (options.length===0) {\n        dialog.Dialog.error(\"No matching gists were found.\");\n        return;\n      }\n      formData = {\n        id: {\n          type: \"SelectBox\",\n          label: \"Script\",\n          options\n        }\n      };\n      answer = await dialog.Dialog.form(\"Please select from the following scripts:\", formData).promise();\n\n      if (!answer || !answer.id) {\n        return;\n      }\n      this.setScript(await this._getRawGist(answer.id));\n    },\n\n    /**\n     * Loads a gist by its id.\n     * @return {Promise<void>}\n     */\n    async loadGistById() {\n      let answer = await dialog.Dialog.prompt(\"Please enter the id of the gist to replay\");\n      if (!answer || !answer.id) {\n        return;\n      }\n      this.setScript(await this._getRawGist(answer.id));\n      this.setGistId(answer.id);\n    }\n  },\n\n  /**\n   * Will be called after class has been loaded, before application startup\n   */\n  defer: function() {\n    if (!qx.core.Environment.get(\"module.objectid\") || !qx.core.Environment.get(\"eventrecorder.enabled\")) {\n     return;\n    }\n    qookery.Qookery.setOption(\n      qookery.Qookery.OPTION_EXTERNAL_LIBRARIES,\n      qx.util.ResourceManager.getInstance().toUri(\"cboulanger/eventrecorder/js\"));\n    // called when application is ready\n    qx.bom.Lifecycle.onReady(async () => {\n      let infoPane = cboulanger.eventrecorder.InfoPane.getInstance();\n      infoPane.useIcon(\"waiting\");\n      infoPane.display(\"Initializing Event Recorder, please wait...\");\n      let dispayedText = infoPane.getDisplayedText();\n      // assign object ids if object id generator has been included\n      if (qx.Class.isDefined(\"cboulanger.eventrecorder.ObjectIdGenerator\")) {\n        await new Promise(resolve => {\n          const objIdGen = qx.Class.getByName(\"cboulanger.eventrecorder.ObjectIdGenerator\").getInstance();\n          objIdGen.addListenerOnce(\"done\", resolve);\n        });\n      }\n\n      // hide splash screen if it hasn't used by other code yet\n      if (infoPane.getDisplayedText() === dispayedText) {\n        infoPane.hide();\n      }\n      // create controller\n      let controller = new cboulanger.eventrecorder.UiController();\n      qx.core.Init.getApplication().getRoot().add(controller, {top:0, right:10});\n      if (!qx.core.Environment.get(\"eventrecorder.hidden\")) {\n        controller.show();\n      }\n    });\n  }\n});\n"
  ]
}